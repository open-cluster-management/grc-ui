sudo: required
language: node_js

matrix:
  fast_finish: true
  include:
    - os: linux-s390
      env: OSARCH=linux-s390
      dist: trusty
    - os: linux-ppc64le
      env: OSARCH=linux-ppc64le
      dist: trusty
    - os: linux
      env: OSARCH=linux-amd64
      dist: trusty

addons:
  packages:
    - openjdk-8-jdk
  chrome: stable

cache:
  apt: true

branches:
  only:
    - master
    - dev
    - /^[0-9]+\..*$/
    - /^v[0-9]+\..*$/
    - /^release-[0-9]+\..*$/

services:
  - docker
  - xvfb


env:
  global:
    # Required
    - OS=linux
    - COMPONENT_TAG_EXTENSION="-${TRAVIS_COMMIT}"

stages:
  - build
  - unit-test
  - test-e2e
  - publish
  
jobs:
  include:
    - stage: build
      name: "Build the image and run unit tests"
      script:
        - if [ "$TRAVIS_PULL_REQUEST" != "false" ]; then export COMPONENT_TAG_EXTENSION="-PR${TRAVIS_PULL_REQUEST}-${TRAVIS_COMMIT}"; fi;
        - |
          make
          make component/build
          make component/push
    - stage: unit-test
      name: "Deploy the image to a cluster and run e2e tests"
      if: type = pull_request
      script:
        # Set the image tag differently for PRs
        - if [ "$TRAVIS_PULL_REQUEST" != "false" ]; then export COMPONENT_TAG_EXTENSION="-PR${TRAVIS_PULL_REQUEST}-${TRAVIS_COMMIT}"; fi;
        # Bootstrap the build harness, pull test image, and run unit tests.  
        - | 
          make 
          make component/pull 
          make component/test/unit
    - stage: test-e2e
      name: "Deploy the image to a cluster and run e2e tests"
      if: type = pull_request
      script:
        #Check out a clusterpool, set up oc, deploy, run e2e tests, and return clusterpool cluster
        - if [ "$TRAVIS_PULL_REQUEST" != "false" ]; then export COMPONENT_TAG_EXTENSION="-PR${TRAVIS_PULL_REQUEST}-${TRAVIS_COMMIT}"; fi;
        - |
          make 
          make component/pull 
          git clone ${CLUSTERPOOL_PROJECT_REPO} 
          cd clusterpool 
          make init 
          make clusterpool:init 
          make clusterpool:checkout 
          make clusterpool:get-config > ${TRAVIS_BUILD_DIR}/config.txt 
          cd .. 
          make oc/install 
          ${TRAVIS_BUILD_DIR}/build-harness/vendor/oc login $(cat ${TRAVIS_BUILD_DIR}/config.txt | grep ocp_api_url | awk '{ print $3 }') --insecure-skip-tls-verify=true -u $(cat ${TRAVIS_BUILD_DIR}/config.txt | grep ocp_admin_username | awk '{ print $3 }') -p $(cat ${TRAVIS_BUILD_DIR}/config.txt | grep ocp_admin_password | awk '{ print $3 }') 
          make component/deploy 
          make component/test/e2e 
          cd clusterpool 
          make clusterpool:return
    - stage: publish
      name: "Publish the image to quay with an official version/sha tag and publish entry to integration pipeline stage"
      if: type = push AND branch IN ( master )
      script:
        - |
          make 
          make pipeline-manifest/update PIPELINE_MANIFEST_COMPONENT_SHA256=${TRAVIS_COMMIT} PIPELINE_MANIFEST_COMPONENT_REPO=${TRAVIS_REPO_SLUG}


# before_install:
#   - make init
#   - echo -e "machine github.ibm.com\n  login $GITHUB_USER\n  password $GITHUB_TOKEN" > ~/.netrc

# install:
#   - npm install
#   - chmod +x copyright-check.sh
#   - make copyright-check
#   - make unit-test

# before_script:
#   - make local
#   - make image
#   - make run

# script:
#   - make e2e-test
#   - export PREV_COVERAGE_REPORT=$(curl -L -H 'Authorization:token ${GITHUB_TOKEN}' https://raw.github.ibm.com/IBMPrivateCloud/grc-ui/gh-pages/coverage/coverage-summary.json)
#   - node travis-scripts/enforce-coverage.js

# after_success:
#   - test "$TRAVIS_EVENT_TYPE" = "pull_request" && make push || echo "pushing to scratch"
#   - test "$TRAVIS_EVENT_TYPE" != "pull_request" && make release || echo "success"
#   - |
#       if [[ "$TRAVIS_EVENT_TYPE" != "pull_request" ]]; then
#         curl -Lo travis_after_all.py https://raw.github.com/dmakhno/travis_after_all/master/travis_after_all.py
#         python travis_after_all.py https://travis.ibm.com/api
#         export $(cat .to_export_back)
#         if [[ "$BUILD_LEADER" == "YES" ]]; then
#           if [[ "$BUILD_AGGREGATE_STATUS" == "others_succeeded" ]]; then
#             echo "All jobs succeeded! Creating multi arch image..."
#             make multi-arch
#           else
#             echo "Some jobs failed" && exit 1
#           fi
#         fi
#       fi

# after_failure:
#   - |
#       if [ -d "test-output" ]; then
#         docker logs grc-ui >& test-output/e2e/grc-ui-`date +%s`.log
#         sudo apt-get install -y expect
#         mkdir selenium-test && mkdir selenium-test/$TRAVIS_JOB_NUMBER && cp -R test-output/e2e selenium-test/$TRAVIS_JOB_NUMBER
#         expect upload-selenium.sh
#         echo Selenium test failed! Result available at http://9.37.247.85:81/$TRAVIS_JOB_NUMBER/e2e/
#       fi

# notifications:
#   slack: 
#     rooms:
#       - ibm-cloudplatform:9YJcmhOhUJM1pMJfRkYXgb5G#icp-policy-grc-build
#     on_pull_requests: false
#     on_success: change
#     on_failure: always

# deploy:
#   provider: pages
#   skip-cleanup: true
#   github-token: $GITHUB_TOKEN
#   local-dir: test-output
#   github-url: github.ibm.com
#   on:
#     branch: master
