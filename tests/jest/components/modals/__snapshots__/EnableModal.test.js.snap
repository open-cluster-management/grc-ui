// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`DisableModal modal handleSubmit as expected 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <EnableModal
    data={
      Object {
        "__typename": "Compliance",
        "clusterCompliant": "1/2",
        "custom": Object {
          "metadata.annotations[\\"policy.mcm.ibm.com/categories\\"]": "System And Communications Protections",
          "metadata.annotations[\\"policy.mcm.ibm.com/controls\\"]": "IAM",
          "metadata.annotations[\\"policy.mcm.ibm.com/standards\\"]": "FISMA",
          "metadata.name": Object {
            "_owner": null,
            "_store": Object {},
            "key": null,
            "props": Object {
              "children": "policy-auditpolicy-will-sev",
              "replace": false,
              "to": "/multicloud/policies/all/policy-auditpolicy-will-sev",
            },
            "ref": null,
          },
        },
        "kind": "HCMPolicyPolicy",
        "metadata": Object {
          "__typename": "Metadata",
          "annotations": Object {
            "policy.mcm.ibm.com/categories": "SystemAndCommunicationsProtections",
            "policy.mcm.ibm.com/controls": "IAM",
            "policy.mcm.ibm.com/standards": "FISMA",
            "seed-generation": "2",
          },
          "name": "policy-auditpolicy-will-sev",
          "namespace": "mcm",
          "resourceVersion": "5300122",
          "selfLink": "/apis/policy.mcm.ibm.com/v1alpha1/namespaces/mcm/policies/policy-auditpolicy-will-sev",
        },
        "name": "policy-auditpolicy-will-sev",
        "namespace": "mcm",
        "placementBindings": Array [
          Object {
            "__typename": "PlacementBinding",
            "metadata": Object {
              "__typename": "Metadata",
              "name": "binding-policy-auditpolicy-will-sev",
              "selfLink": "/apis/mcm.ibm.com/v1alpha1/namespaces/mcm/placementbindings/binding-policy-auditpolicy-will-sev",
            },
          },
        ],
        "placementPolicies": Array [
          Object {
            "__typename": "PlacementPolicy",
            "metadata": Object {
              "__typename": "Metadata",
              "name": "placement-policy-auditpolicy-will-sev",
              "selfLink": "/apis/mcm.ibm.com/v1alpha1/namespaces/mcm/placementpolicies/placement-policy-auditpolicy-will-sev",
            },
          },
        ],
        "policyCompliant": "1/2",
        "raw": Object {
          "apiVersion": "policy.mcm.ibm.com/v1alpha1",
          "kind": "Policy",
          "metadata": Object {
            "annotations": Object {
              "policy.mcm.ibm.com/categories": "SystemAndCommunicationsProtections",
              "policy.mcm.ibm.com/controls": "IAM",
              "policy.mcm.ibm.com/standards": "FISMA",
              "seed-generation": "2",
            },
            "creationTimestamp": "2019-10-01T14:55:28Z",
            "finalizers": Array [
              "finalizer.policies.ibm.com",
              "propagator.finalizer.mcm.ibm.com",
            ],
            "generation": 27,
            "name": "policy-auditpolicy-will-sev",
            "namespace": "mcm",
            "resourceVersion": "5300122",
            "selfLink": "/apis/policy.mcm.ibm.com/v1alpha1/namespaces/mcm/policies/policy-auditpolicy-will-sev",
            "uid": "81b9569e-e45b-11e9-8895-005056a061f1",
          },
          "spec": Object {
            "complianceType": "musthave",
            "namespaces": Object {
              "exclude": Array [
                "kube-*",
              ],
              "include": Array [
                "default",
              ],
            },
            "policy-templates": Array [
              Object {
                "objectDefinition": Object {
                  "apiVersion": "audit.policies.ibm.com/v1alpha1",
                  "kind": "AuditPolicy",
                  "metadata": Object {
                    "label": Object {
                      "category": "System-Integrity",
                    },
                    "name": "policy-auditpolicy-will-sev",
                  },
                  "spec": Object {
                    "clusterAuditPolicy": Object {
                      "auditPolicyRules": Object {
                        "auth-idp": "ignore",
                        "helmapi": "ignore",
                        "kubernetes": "ignore",
                        "platform-api": "ignore",
                        "platform-identity-manager": "ignore",
                        "platform-identity-provider": "ignore",
                        "vulnerability-advisor": "ignore",
                      },
                    },
                    "namespaceSelector": Object {
                      "exclude": Array [
                        "kube-system",
                      ],
                      "include": Array [
                        "default",
                        "kube-*",
                      ],
                    },
                    "remediationAction": "inform",
                    "severity": "low",
                  },
                },
                "status": Object {
                  "Validity": Object {},
                },
              },
            ],
            "remediationAction": "inform",
          },
          "status": Object {
            "placementBindings": Array [
              "binding-policy-auditpolicy-will-sev",
            ],
            "placementPolicies": Array [
              "placement-policy-auditpolicy-will-sev",
            ],
            "status": Object {
              "cluster1": Object {
                "aggregatePoliciesStatus": Object {
                  "policy-auditpolicy-will-sev": Object {
                    "compliant": "Compliant",
                  },
                },
                "clustername": "cluster1",
                "compliant": "Compliant",
              },
              "clusterhub": Object {
                "aggregatePoliciesStatus": Object {
                  "policy-auditpolicy-will-sev": Object {},
                },
                "clustername": "clusterhub",
              },
            },
          },
        },
        "remediation": "inform",
        "subItems": Array [
          Object {
            "items": Array [
              "binding-policy-auditpolicy-will-sev",
            ],
            "name": "policy.pb",
          },
          Object {
            "items": Array [
              "placement-policy-auditpolicy-will-sev",
            ],
            "name": "policy.pp",
          },
        ],
      }
    }
    handleClose={[MockFunction]}
    handleSubmit={
      [MockFunction] {
        "calls": Array [
          Array [
            Object {
              "list": "HCMPolicyPolicyList",
              "name": "HCMPolicyPolicy",
            },
            "mcm",
            "policy-auditpolicy-will-sev",
            false,
            "/apis/policy.mcm.ibm.com/v1alpha1/namespaces/mcm/policies/policy-auditpolicy-will-sev",
            "/spec/disabled",
          ],
        ],
      }
    }
    label={
      Object {
        "heading": "modal.disable-hcmpolicypolicy.heading",
        "label": "modal.disable-hcmpolicypolicy.label",
        "primaryBtn": "modal.disable-hcmpolicypolicy.heading",
      }
    }
    locale="en-US"
    open={true}
    resourceType={
      Object {
        "list": "HCMPolicyPolicyList",
        "name": "HCMPolicyPolicy",
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        false,
        <Modal
          aria-label="Disable policy"
          focusTrap={true}
          iconDescription="close the modal"
          id="enable-resource-modal"
          modalHeading="Disable policy"
          modalLabel="Disable policy"
          onKeyDown={[Function]}
          onRequestClose={[MockFunction]}
          onRequestSubmit={[Function]}
          open={true}
          passiveModal={false}
          primaryButtonDisabled={false}
          primaryButtonText="Disable policy"
          role="region"
          secondaryButtonText="Cancel"
          selectorPrimaryFocus="[data-modal-primary-focus]"
        >
          <div />
          <p>
            Are you sure you want to enable this policy?
          </p>
        </Modal>,
      ],
    },
    "ref": null,
    "rendered": Array [
      false,
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "aria-label": "Disable policy",
          "children": Array [
            <div />,
            <p>
              Are you sure you want to enable this policy?
            </p>,
          ],
          "focusTrap": true,
          "iconDescription": "close the modal",
          "id": "enable-resource-modal",
          "modalHeading": "Disable policy",
          "modalLabel": "Disable policy",
          "onKeyDown": [Function],
          "onRequestClose": [MockFunction],
          "onRequestSubmit": [Function],
          "open": true,
          "passiveModal": false,
          "primaryButtonDisabled": false,
          "primaryButtonText": "Disable policy",
          "role": "region",
          "secondaryButtonText": "Cancel",
          "selectorPrimaryFocus": "[data-modal-primary-focus]",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": false,
            },
            "ref": null,
            "rendered": false,
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Are you sure you want to enable this policy?",
            },
            "ref": null,
            "rendered": "Are you sure you want to enable this policy?",
            "type": "p",
          },
        ],
        "type": [Function],
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          false,
          <Modal
            aria-label="Disable policy"
            focusTrap={true}
            iconDescription="close the modal"
            id="enable-resource-modal"
            modalHeading="Disable policy"
            modalLabel="Disable policy"
            onKeyDown={[Function]}
            onRequestClose={[MockFunction]}
            onRequestSubmit={[Function]}
            open={true}
            passiveModal={false}
            primaryButtonDisabled={false}
            primaryButtonText="Disable policy"
            role="region"
            secondaryButtonText="Cancel"
            selectorPrimaryFocus="[data-modal-primary-focus]"
          >
            <div />
            <p>
              Are you sure you want to enable this policy?
            </p>
          </Modal>,
        ],
      },
      "ref": null,
      "rendered": Array [
        false,
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "aria-label": "Disable policy",
            "children": Array [
              <div />,
              <p>
                Are you sure you want to enable this policy?
              </p>,
            ],
            "focusTrap": true,
            "iconDescription": "close the modal",
            "id": "enable-resource-modal",
            "modalHeading": "Disable policy",
            "modalLabel": "Disable policy",
            "onKeyDown": [Function],
            "onRequestClose": [MockFunction],
            "onRequestSubmit": [Function],
            "open": true,
            "passiveModal": false,
            "primaryButtonDisabled": false,
            "primaryButtonText": "Disable policy",
            "role": "region",
            "secondaryButtonText": "Cancel",
            "selectorPrimaryFocus": "[data-modal-primary-focus]",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": false,
              },
              "ref": null,
              "rendered": false,
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Are you sure you want to enable this policy?",
              },
              "ref": null,
              "rendered": "Are you sure you want to enable this policy?",
              "type": "p",
            },
          ],
          "type": [Function],
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "static getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;

exports[`DisableModal modal renders as expected 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <EnableModal
    data={
      Object {
        "__typename": "Compliance",
        "clusterCompliant": "1/2",
        "custom": Object {
          "metadata.annotations[\\"policy.mcm.ibm.com/categories\\"]": "System And Communications Protections",
          "metadata.annotations[\\"policy.mcm.ibm.com/controls\\"]": "IAM",
          "metadata.annotations[\\"policy.mcm.ibm.com/standards\\"]": "FISMA",
          "metadata.name": Object {
            "_owner": null,
            "_store": Object {},
            "key": null,
            "props": Object {
              "children": "policy-auditpolicy-will-sev",
              "replace": false,
              "to": "/multicloud/policies/all/policy-auditpolicy-will-sev",
            },
            "ref": null,
          },
        },
        "kind": "HCMPolicyPolicy",
        "metadata": Object {
          "__typename": "Metadata",
          "annotations": Object {
            "policy.mcm.ibm.com/categories": "SystemAndCommunicationsProtections",
            "policy.mcm.ibm.com/controls": "IAM",
            "policy.mcm.ibm.com/standards": "FISMA",
            "seed-generation": "2",
          },
          "name": "policy-auditpolicy-will-sev",
          "namespace": "mcm",
          "resourceVersion": "5300122",
          "selfLink": "/apis/policy.mcm.ibm.com/v1alpha1/namespaces/mcm/policies/policy-auditpolicy-will-sev",
        },
        "name": "policy-auditpolicy-will-sev",
        "namespace": "mcm",
        "placementBindings": Array [
          Object {
            "__typename": "PlacementBinding",
            "metadata": Object {
              "__typename": "Metadata",
              "name": "binding-policy-auditpolicy-will-sev",
              "selfLink": "/apis/mcm.ibm.com/v1alpha1/namespaces/mcm/placementbindings/binding-policy-auditpolicy-will-sev",
            },
          },
        ],
        "placementPolicies": Array [
          Object {
            "__typename": "PlacementPolicy",
            "metadata": Object {
              "__typename": "Metadata",
              "name": "placement-policy-auditpolicy-will-sev",
              "selfLink": "/apis/mcm.ibm.com/v1alpha1/namespaces/mcm/placementpolicies/placement-policy-auditpolicy-will-sev",
            },
          },
        ],
        "policyCompliant": "1/2",
        "raw": Object {
          "apiVersion": "policy.mcm.ibm.com/v1alpha1",
          "kind": "Policy",
          "metadata": Object {
            "annotations": Object {
              "policy.mcm.ibm.com/categories": "SystemAndCommunicationsProtections",
              "policy.mcm.ibm.com/controls": "IAM",
              "policy.mcm.ibm.com/standards": "FISMA",
              "seed-generation": "2",
            },
            "creationTimestamp": "2019-10-01T14:55:28Z",
            "finalizers": Array [
              "finalizer.policies.ibm.com",
              "propagator.finalizer.mcm.ibm.com",
            ],
            "generation": 27,
            "name": "policy-auditpolicy-will-sev",
            "namespace": "mcm",
            "resourceVersion": "5300122",
            "selfLink": "/apis/policy.mcm.ibm.com/v1alpha1/namespaces/mcm/policies/policy-auditpolicy-will-sev",
            "uid": "81b9569e-e45b-11e9-8895-005056a061f1",
          },
          "spec": Object {
            "complianceType": "musthave",
            "namespaces": Object {
              "exclude": Array [
                "kube-*",
              ],
              "include": Array [
                "default",
              ],
            },
            "policy-templates": Array [
              Object {
                "objectDefinition": Object {
                  "apiVersion": "audit.policies.ibm.com/v1alpha1",
                  "kind": "AuditPolicy",
                  "metadata": Object {
                    "label": Object {
                      "category": "System-Integrity",
                    },
                    "name": "policy-auditpolicy-will-sev",
                  },
                  "spec": Object {
                    "clusterAuditPolicy": Object {
                      "auditPolicyRules": Object {
                        "auth-idp": "ignore",
                        "helmapi": "ignore",
                        "kubernetes": "ignore",
                        "platform-api": "ignore",
                        "platform-identity-manager": "ignore",
                        "platform-identity-provider": "ignore",
                        "vulnerability-advisor": "ignore",
                      },
                    },
                    "namespaceSelector": Object {
                      "exclude": Array [
                        "kube-system",
                      ],
                      "include": Array [
                        "default",
                        "kube-*",
                      ],
                    },
                    "remediationAction": "inform",
                    "severity": "low",
                  },
                },
                "status": Object {
                  "Validity": Object {},
                },
              },
            ],
            "remediationAction": "inform",
          },
          "status": Object {
            "placementBindings": Array [
              "binding-policy-auditpolicy-will-sev",
            ],
            "placementPolicies": Array [
              "placement-policy-auditpolicy-will-sev",
            ],
            "status": Object {
              "cluster1": Object {
                "aggregatePoliciesStatus": Object {
                  "policy-auditpolicy-will-sev": Object {
                    "compliant": "Compliant",
                  },
                },
                "clustername": "cluster1",
                "compliant": "Compliant",
              },
              "clusterhub": Object {
                "aggregatePoliciesStatus": Object {
                  "policy-auditpolicy-will-sev": Object {},
                },
                "clustername": "clusterhub",
              },
            },
          },
        },
        "remediation": "inform",
        "subItems": Array [
          Object {
            "items": Array [
              "binding-policy-auditpolicy-will-sev",
            ],
            "name": "policy.pb",
          },
          Object {
            "items": Array [
              "placement-policy-auditpolicy-will-sev",
            ],
            "name": "policy.pp",
          },
        ],
      }
    }
    handleClose={[MockFunction]}
    label={
      Object {
        "heading": "modal.disable-hcmpolicypolicy.heading",
        "label": "modal.disable-hcmpolicypolicy.label",
        "primaryBtn": "modal.disable-hcmpolicypolicy.heading",
      }
    }
    locale="en-US"
    open={true}
    resourceType={
      Object {
        "list": "HCMPolicyPolicyList",
        "name": "HCMPolicyPolicy",
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        false,
        <Modal
          aria-label="Disable policy"
          focusTrap={true}
          iconDescription="close the modal"
          id="enable-resource-modal"
          modalHeading="Disable policy"
          modalLabel="Disable policy"
          onKeyDown={[Function]}
          onRequestClose={[MockFunction]}
          onRequestSubmit={[Function]}
          open={true}
          passiveModal={false}
          primaryButtonDisabled={false}
          primaryButtonText="Disable policy"
          role="region"
          secondaryButtonText="Cancel"
          selectorPrimaryFocus="[data-modal-primary-focus]"
        >
          <div />
          <p>
            Are you sure you want to enable this policy?
          </p>
        </Modal>,
      ],
    },
    "ref": null,
    "rendered": Array [
      false,
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "aria-label": "Disable policy",
          "children": Array [
            <div />,
            <p>
              Are you sure you want to enable this policy?
            </p>,
          ],
          "focusTrap": true,
          "iconDescription": "close the modal",
          "id": "enable-resource-modal",
          "modalHeading": "Disable policy",
          "modalLabel": "Disable policy",
          "onKeyDown": [Function],
          "onRequestClose": [MockFunction],
          "onRequestSubmit": [Function],
          "open": true,
          "passiveModal": false,
          "primaryButtonDisabled": false,
          "primaryButtonText": "Disable policy",
          "role": "region",
          "secondaryButtonText": "Cancel",
          "selectorPrimaryFocus": "[data-modal-primary-focus]",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": false,
            },
            "ref": null,
            "rendered": false,
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Are you sure you want to enable this policy?",
            },
            "ref": null,
            "rendered": "Are you sure you want to enable this policy?",
            "type": "p",
          },
        ],
        "type": [Function],
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          false,
          <Modal
            aria-label="Disable policy"
            focusTrap={true}
            iconDescription="close the modal"
            id="enable-resource-modal"
            modalHeading="Disable policy"
            modalLabel="Disable policy"
            onKeyDown={[Function]}
            onRequestClose={[MockFunction]}
            onRequestSubmit={[Function]}
            open={true}
            passiveModal={false}
            primaryButtonDisabled={false}
            primaryButtonText="Disable policy"
            role="region"
            secondaryButtonText="Cancel"
            selectorPrimaryFocus="[data-modal-primary-focus]"
          >
            <div />
            <p>
              Are you sure you want to enable this policy?
            </p>
          </Modal>,
        ],
      },
      "ref": null,
      "rendered": Array [
        false,
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "aria-label": "Disable policy",
            "children": Array [
              <div />,
              <p>
                Are you sure you want to enable this policy?
              </p>,
            ],
            "focusTrap": true,
            "iconDescription": "close the modal",
            "id": "enable-resource-modal",
            "modalHeading": "Disable policy",
            "modalLabel": "Disable policy",
            "onKeyDown": [Function],
            "onRequestClose": [MockFunction],
            "onRequestSubmit": [Function],
            "open": true,
            "passiveModal": false,
            "primaryButtonDisabled": false,
            "primaryButtonText": "Disable policy",
            "role": "region",
            "secondaryButtonText": "Cancel",
            "selectorPrimaryFocus": "[data-modal-primary-focus]",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": false,
              },
              "ref": null,
              "rendered": false,
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Are you sure you want to enable this policy?",
              },
              "ref": null,
              "rendered": "Are you sure you want to enable this policy?",
              "type": "p",
            },
          ],
          "type": [Function],
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "static getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;

exports[`DisableModal modal renders errors as expected 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <EnableModal
    data={
      Object {
        "__typename": "Compliance",
        "clusterCompliant": "1/2",
        "custom": Object {
          "metadata.annotations[\\"policy.mcm.ibm.com/categories\\"]": "System And Communications Protections",
          "metadata.annotations[\\"policy.mcm.ibm.com/controls\\"]": "IAM",
          "metadata.annotations[\\"policy.mcm.ibm.com/standards\\"]": "FISMA",
          "metadata.name": Object {
            "_owner": null,
            "_store": Object {},
            "key": null,
            "props": Object {
              "children": "policy-auditpolicy-will-sev",
              "replace": false,
              "to": "/multicloud/policies/all/policy-auditpolicy-will-sev",
            },
            "ref": null,
          },
        },
        "kind": "HCMPolicyPolicy",
        "metadata": Object {
          "__typename": "Metadata",
          "annotations": Object {
            "policy.mcm.ibm.com/categories": "SystemAndCommunicationsProtections",
            "policy.mcm.ibm.com/controls": "IAM",
            "policy.mcm.ibm.com/standards": "FISMA",
            "seed-generation": "2",
          },
          "name": "policy-auditpolicy-will-sev",
          "namespace": "mcm",
          "resourceVersion": "5300122",
          "selfLink": "/apis/policy.mcm.ibm.com/v1alpha1/namespaces/mcm/policies/policy-auditpolicy-will-sev",
        },
        "name": "policy-auditpolicy-will-sev",
        "namespace": "mcm",
        "placementBindings": Array [
          Object {
            "__typename": "PlacementBinding",
            "metadata": Object {
              "__typename": "Metadata",
              "name": "binding-policy-auditpolicy-will-sev",
              "selfLink": "/apis/mcm.ibm.com/v1alpha1/namespaces/mcm/placementbindings/binding-policy-auditpolicy-will-sev",
            },
          },
        ],
        "placementPolicies": Array [
          Object {
            "__typename": "PlacementPolicy",
            "metadata": Object {
              "__typename": "Metadata",
              "name": "placement-policy-auditpolicy-will-sev",
              "selfLink": "/apis/mcm.ibm.com/v1alpha1/namespaces/mcm/placementpolicies/placement-policy-auditpolicy-will-sev",
            },
          },
        ],
        "policyCompliant": "1/2",
        "raw": Object {
          "apiVersion": "policy.mcm.ibm.com/v1alpha1",
          "kind": "Policy",
          "metadata": Object {
            "annotations": Object {
              "policy.mcm.ibm.com/categories": "SystemAndCommunicationsProtections",
              "policy.mcm.ibm.com/controls": "IAM",
              "policy.mcm.ibm.com/standards": "FISMA",
              "seed-generation": "2",
            },
            "creationTimestamp": "2019-10-01T14:55:28Z",
            "finalizers": Array [
              "finalizer.policies.ibm.com",
              "propagator.finalizer.mcm.ibm.com",
            ],
            "generation": 27,
            "name": "policy-auditpolicy-will-sev",
            "namespace": "mcm",
            "resourceVersion": "5300122",
            "selfLink": "/apis/policy.mcm.ibm.com/v1alpha1/namespaces/mcm/policies/policy-auditpolicy-will-sev",
            "uid": "81b9569e-e45b-11e9-8895-005056a061f1",
          },
          "spec": Object {
            "complianceType": "musthave",
            "namespaces": Object {
              "exclude": Array [
                "kube-*",
              ],
              "include": Array [
                "default",
              ],
            },
            "policy-templates": Array [
              Object {
                "objectDefinition": Object {
                  "apiVersion": "audit.policies.ibm.com/v1alpha1",
                  "kind": "AuditPolicy",
                  "metadata": Object {
                    "label": Object {
                      "category": "System-Integrity",
                    },
                    "name": "policy-auditpolicy-will-sev",
                  },
                  "spec": Object {
                    "clusterAuditPolicy": Object {
                      "auditPolicyRules": Object {
                        "auth-idp": "ignore",
                        "helmapi": "ignore",
                        "kubernetes": "ignore",
                        "platform-api": "ignore",
                        "platform-identity-manager": "ignore",
                        "platform-identity-provider": "ignore",
                        "vulnerability-advisor": "ignore",
                      },
                    },
                    "namespaceSelector": Object {
                      "exclude": Array [
                        "kube-system",
                      ],
                      "include": Array [
                        "default",
                        "kube-*",
                      ],
                    },
                    "remediationAction": "inform",
                    "severity": "low",
                  },
                },
                "status": Object {
                  "Validity": Object {},
                },
              },
            ],
            "remediationAction": "inform",
          },
          "status": Object {
            "placementBindings": Array [
              "binding-policy-auditpolicy-will-sev",
            ],
            "placementPolicies": Array [
              "placement-policy-auditpolicy-will-sev",
            ],
            "status": Object {
              "cluster1": Object {
                "aggregatePoliciesStatus": Object {
                  "policy-auditpolicy-will-sev": Object {
                    "compliant": "Compliant",
                  },
                },
                "clustername": "cluster1",
                "compliant": "Compliant",
              },
              "clusterhub": Object {
                "aggregatePoliciesStatus": Object {
                  "policy-auditpolicy-will-sev": Object {},
                },
                "clustername": "clusterhub",
              },
            },
          },
        },
        "remediation": "inform",
        "subItems": Array [
          Object {
            "items": Array [
              "binding-policy-auditpolicy-will-sev",
            ],
            "name": "policy.pb",
          },
          Object {
            "items": Array [
              "placement-policy-auditpolicy-will-sev",
            ],
            "name": "policy.pp",
          },
        ],
      }
    }
    handleClose={[MockFunction]}
    label={
      Object {
        "heading": "modal.disable-hcmpolicypolicy.heading",
        "label": "modal.disable-hcmpolicypolicy.label",
        "primaryBtn": "modal.disable-hcmpolicypolicy.heading",
      }
    }
    locale="en-US"
    open={true}
    reqErrorMsg="dummy error message"
    reqStatus="ERROR"
    resourceType={
      Object {
        "list": "HCMPolicyPolicyList",
        "name": "HCMPolicyPolicy",
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        false,
        <Modal
          aria-label="Disable policy"
          focusTrap={true}
          iconDescription="close the modal"
          id="enable-resource-modal"
          modalHeading="Disable policy"
          modalLabel="Disable policy"
          onKeyDown={[Function]}
          onRequestClose={[MockFunction]}
          onRequestSubmit={[Function]}
          open={true}
          passiveModal={false}
          primaryButtonDisabled={false}
          primaryButtonText="Disable policy"
          role="region"
          secondaryButtonText="Cancel"
          selectorPrimaryFocus="[data-modal-primary-focus]"
        >
          <div>
            <Notification
              hideCloseButton={false}
              iconDescription="closes notification"
              kind="error"
              onCloseButtonClick={[Function]}
              subtitle="dummy error message"
              title=""
            />
          </div>
          <p>
            Are you sure you want to enable this policy?
          </p>
        </Modal>,
      ],
    },
    "ref": null,
    "rendered": Array [
      false,
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "aria-label": "Disable policy",
          "children": Array [
            <div>
              <Notification
                hideCloseButton={false}
                iconDescription="closes notification"
                kind="error"
                onCloseButtonClick={[Function]}
                subtitle="dummy error message"
                title=""
              />
            </div>,
            <p>
              Are you sure you want to enable this policy?
            </p>,
          ],
          "focusTrap": true,
          "iconDescription": "close the modal",
          "id": "enable-resource-modal",
          "modalHeading": "Disable policy",
          "modalLabel": "Disable policy",
          "onKeyDown": [Function],
          "onRequestClose": [MockFunction],
          "onRequestSubmit": [Function],
          "open": true,
          "passiveModal": false,
          "primaryButtonDisabled": false,
          "primaryButtonText": "Disable policy",
          "role": "region",
          "secondaryButtonText": "Cancel",
          "selectorPrimaryFocus": "[data-modal-primary-focus]",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <Notification
                hideCloseButton={false}
                iconDescription="closes notification"
                kind="error"
                onCloseButtonClick={[Function]}
                subtitle="dummy error message"
                title=""
              />,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "hideCloseButton": false,
                "iconDescription": "closes notification",
                "kind": "error",
                "onCloseButtonClick": [Function],
                "subtitle": "dummy error message",
                "title": "",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Are you sure you want to enable this policy?",
            },
            "ref": null,
            "rendered": "Are you sure you want to enable this policy?",
            "type": "p",
          },
        ],
        "type": [Function],
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          false,
          <Modal
            aria-label="Disable policy"
            focusTrap={true}
            iconDescription="close the modal"
            id="enable-resource-modal"
            modalHeading="Disable policy"
            modalLabel="Disable policy"
            onKeyDown={[Function]}
            onRequestClose={[MockFunction]}
            onRequestSubmit={[Function]}
            open={true}
            passiveModal={false}
            primaryButtonDisabled={false}
            primaryButtonText="Disable policy"
            role="region"
            secondaryButtonText="Cancel"
            selectorPrimaryFocus="[data-modal-primary-focus]"
          >
            <div>
              <Notification
                hideCloseButton={false}
                iconDescription="closes notification"
                kind="error"
                onCloseButtonClick={[Function]}
                subtitle="dummy error message"
                title=""
              />
            </div>
            <p>
              Are you sure you want to enable this policy?
            </p>
          </Modal>,
        ],
      },
      "ref": null,
      "rendered": Array [
        false,
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "aria-label": "Disable policy",
            "children": Array [
              <div>
                <Notification
                  hideCloseButton={false}
                  iconDescription="closes notification"
                  kind="error"
                  onCloseButtonClick={[Function]}
                  subtitle="dummy error message"
                  title=""
                />
              </div>,
              <p>
                Are you sure you want to enable this policy?
              </p>,
            ],
            "focusTrap": true,
            "iconDescription": "close the modal",
            "id": "enable-resource-modal",
            "modalHeading": "Disable policy",
            "modalLabel": "Disable policy",
            "onKeyDown": [Function],
            "onRequestClose": [MockFunction],
            "onRequestSubmit": [Function],
            "open": true,
            "passiveModal": false,
            "primaryButtonDisabled": false,
            "primaryButtonText": "Disable policy",
            "role": "region",
            "secondaryButtonText": "Cancel",
            "selectorPrimaryFocus": "[data-modal-primary-focus]",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <Notification
                  hideCloseButton={false}
                  iconDescription="closes notification"
                  kind="error"
                  onCloseButtonClick={[Function]}
                  subtitle="dummy error message"
                  title=""
                />,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "hideCloseButton": false,
                  "iconDescription": "closes notification",
                  "kind": "error",
                  "onCloseButtonClick": [Function],
                  "subtitle": "dummy error message",
                  "title": "",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Are you sure you want to enable this policy?",
              },
              "ref": null,
              "rendered": "Are you sure you want to enable this policy?",
              "type": "p",
            },
          ],
          "type": [Function],
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "static getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
