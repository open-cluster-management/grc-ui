// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`GrcCardsModule collapseClick collapseClick collapse as expected 1`] = `"card=false"`;

exports[`GrcCardsModule collapseClick collapseClick collapse as expected 2`] = `"card=true"`;

exports[`GrcCardsModule collapseClick collapseClick expand as expected 1`] = `"card=false"`;

exports[`GrcCardsModule collapseClick getPolicyCardChoices as expected 1`] = `
Array [
  Object {
    "label": "Categories",
    "value": "categories",
  },
  Object {
    "label": "Standards",
    "value": "standards",
  },
]
`;

exports[`GrcCardsModule collapseClick getPolicyCardChoices as expected 2`] = `
Array [
  Object {
    "label": "Categories",
    "value": "categories",
  },
  Object {
    "label": "Standards",
    "value": "standards",
  },
]
`;

exports[`GrcCardsModule collapseClick onChange as expected 1`] = `undefined`;

exports[`GrcCardsModule collapseClick onChange as expected 2`] = `undefined`;

exports[`GrcCardsModule findings page categories view renders collapse as expected 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <GrcCardsModule
    activeFilters={
      Object {
        "activeFilters": Object {},
      }
    }
    displayType="findings"
    grcItems={
      Array [
        Object {
          "__typename": "Occurrence",
          "context": Object {
            "accountId": "id-mycluster-account",
            "clusterName": "mycluster_name",
            "namespaceName": "kube-system",
            "region": null,
            "resourceCrn": null,
            "resourceId": "4093fbf9-765f-11e9-9e07-00163e01db7b",
            "resourceName": "other-auth-secret",
            "resourceType": "Secret",
            "serviceCrn": null,
            "serviceName": null,
          },
          "finding": Object {
            "certainty": "HIGH",
            "dataTransferred": null,
            "networkConnection": null,
            "nextSteps": Array [
              Object {
                "title": "View the details for the compliance problem in the occurrence of the findings.",
                "url": null,
              },
            ],
            "severity": "HIGH",
          },
          "name": "id-mycluster-account/providers/security-advisor/occurrences/secret-4093fbf9-765f-11e9-9e07-00163e01db7b",
          "reportedBy": Object {
            "id": "mcm-policy-adapter",
            "title": "Security Advisor MCM Policy Findings Adapter",
            "url": null,
          },
          "securityClassification": Object {
            "securityCategories": Array [
              "System and communications protections",
            ],
            "securityControl": "test",
            "securityStandards": Array [
              "NIST",
              "CIS",
            ],
          },
          "shortDescription": "Policy that is not compliant",
        },
        Object {
          "__typename": "Occurrence",
          "context": Object {
            "accountId": "id-mycluster-account",
            "clusterName": "cluster1",
            "namespaceName": "kube-system",
            "region": null,
            "resourceCrn": null,
            "resourceId": "4093fbf5-765f-11e9-9e07-00163e01db7b",
            "resourceName": "platform-auth-secret",
            "resourceType": "Secret",
            "serviceCrn": null,
            "serviceName": null,
          },
          "finding": Object {
            "certainty": "HIGH",
            "dataTransferred": null,
            "networkConnection": null,
            "nextSteps": Array [
              Object {
                "title": "View the details for the compliance problem in the occurrence of the findings.",
                "url": null,
              },
            ],
            "severity": "HIGH",
          },
          "name": "id-mycluster-account/providers/security-advisor/occurrences/secret-4093fbf5-765f-11e9-9e07-00163e01db7b",
          "reportedBy": Object {
            "id": "mcm-policy-adapter",
            "title": "Security Advisor MCM Policy Findings Adapter",
            "url": null,
          },
          "securityClassification": Object {
            "securityCategories": Array [
              "System and communications protections",
            ],
            "securityControl": "test",
            "securityStandards": Array [
              "NIST",
              "CIS",
            ],
          },
          "shortDescription": "Policy that is not compliant",
        },
        Object {
          "__typename": "Occurrence",
          "context": Object {
            "accountId": "id-mycluster-account",
            "clusterName": "clusterhub",
            "namespaceName": "kube-system",
            "region": null,
            "resourceCrn": null,
            "resourceId": "94fe9769-765f-11e9-9e07-00163e01db7b",
            "resourceName": "multicluster_name-hub-search-secrets",
            "resourceType": "Secret",
            "serviceCrn": null,
            "serviceName": null,
          },
          "finding": Object {
            "certainty": "HIGH",
            "dataTransferred": null,
            "networkConnection": null,
            "nextSteps": Array [
              Object {
                "title": "View the details for the compliance problem in the occurrence of the findings.",
                "url": null,
              },
            ],
            "severity": "HIGH",
          },
          "name": "id-mycluster-account/providers/security-advisor/occurrences/secret-94fe9769-765f-11e9-9e07-00163e01db7b",
          "reportedBy": Object {
            "id": "mcm-policy-adapter",
            "title": "Security Advisor MCM Policy Findings Adapter",
            "url": null,
          },
          "securityClassification": Object {
            "securityCategories": Array [
              "System and communications protections",
            ],
            "securityControl": "test",
            "securityStandards": Array [
              "NIST",
              "CIS",
            ],
          },
          "shortDescription": "Policy that is not compliant",
        },
      ]
    }
    handleDrillDownClick={[MockFunction]}
    showGrcCard={false}
    updateViewState={[MockFunction]}
    viewState={
      Object {
        "viewState": Object {
          "grcCardChoice": "categories",
        },
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <div
          className="header-container card-collapsed"
        >
          <button
            className="collapse"
            onClick={[Function]}
          >
            <span
              className="collapse-hint"
            >
              Want to see your summary cards?
            </span>
            <span
              className="collapse-button"
            >
              Expand summary
            </span>
            <Icon
              className="arrow-down"
              description="expand"
              fillRule="evenodd"
              name="chevron--down"
              role="img"
            />
          </button>
        </div>,
        false,
      ],
      "className": "module-grc-cards",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            false,
            false,
            <button
              className="collapse"
              onClick={[Function]}
            >
              <span
                className="collapse-hint"
              >
                Want to see your summary cards?
              </span>
              <span
                className="collapse-button"
              >
                Expand summary
              </span>
              <Icon
                className="arrow-down"
                description="expand"
                fillRule="evenodd"
                name="chevron--down"
                role="img"
              />
            </button>,
          ],
          "className": "header-container card-collapsed",
        },
        "ref": null,
        "rendered": Array [
          false,
          false,
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <span
                  className="collapse-hint"
                >
                  Want to see your summary cards?
                </span>,
                <span
                  className="collapse-button"
                >
                  Expand summary
                </span>,
                <Icon
                  className="arrow-down"
                  description="expand"
                  fillRule="evenodd"
                  name="chevron--down"
                  role="img"
                />,
              ],
              "className": "collapse",
              "onClick": [Function],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "Want to see your summary cards?",
                  "className": "collapse-hint",
                },
                "ref": null,
                "rendered": "Want to see your summary cards?",
                "type": "span",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "Expand summary",
                  "className": "collapse-button",
                },
                "ref": null,
                "rendered": "Expand summary",
                "type": "span",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "className": "arrow-down",
                  "description": "expand",
                  "fillRule": "evenodd",
                  "name": "chevron--down",
                  "role": "img",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
            ],
            "type": "button",
          },
        ],
        "type": "div",
      },
      false,
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <div
            className="header-container card-collapsed"
          >
            <button
              className="collapse"
              onClick={[Function]}
            >
              <span
                className="collapse-hint"
              >
                Want to see your summary cards?
              </span>
              <span
                className="collapse-button"
              >
                Expand summary
              </span>
              <Icon
                className="arrow-down"
                description="expand"
                fillRule="evenodd"
                name="chevron--down"
                role="img"
              />
            </button>
          </div>,
          false,
        ],
        "className": "module-grc-cards",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              false,
              false,
              <button
                className="collapse"
                onClick={[Function]}
              >
                <span
                  className="collapse-hint"
                >
                  Want to see your summary cards?
                </span>
                <span
                  className="collapse-button"
                >
                  Expand summary
                </span>
                <Icon
                  className="arrow-down"
                  description="expand"
                  fillRule="evenodd"
                  name="chevron--down"
                  role="img"
                />
              </button>,
            ],
            "className": "header-container card-collapsed",
          },
          "ref": null,
          "rendered": Array [
            false,
            false,
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <span
                    className="collapse-hint"
                  >
                    Want to see your summary cards?
                  </span>,
                  <span
                    className="collapse-button"
                  >
                    Expand summary
                  </span>,
                  <Icon
                    className="arrow-down"
                    description="expand"
                    fillRule="evenodd"
                    name="chevron--down"
                    role="img"
                  />,
                ],
                "className": "collapse",
                "onClick": [Function],
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "Want to see your summary cards?",
                    "className": "collapse-hint",
                  },
                  "ref": null,
                  "rendered": "Want to see your summary cards?",
                  "type": "span",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "Expand summary",
                    "className": "collapse-button",
                  },
                  "ref": null,
                  "rendered": "Expand summary",
                  "type": "span",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "className": "arrow-down",
                    "description": "expand",
                    "fillRule": "evenodd",
                    "name": "chevron--down",
                    "role": "img",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
              ],
              "type": "button",
            },
          ],
          "type": "div",
        },
        false,
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": true,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    Symbol(enzyme.__providerValues__): undefined,
  },
  Symbol(enzyme.__providerValues__): Map {},
  Symbol(enzyme.__childContext__): null,
}
`;

exports[`GrcCardsModule findings page categories view renders expand as expected 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <GrcCardsModule
    activeFilters={
      Object {
        "activeFilters": Object {},
      }
    }
    displayType="findings"
    grcItems={
      Array [
        Object {
          "__typename": "Occurrence",
          "context": Object {
            "accountId": "id-mycluster-account",
            "clusterName": "mycluster_name",
            "namespaceName": "kube-system",
            "region": null,
            "resourceCrn": null,
            "resourceId": "4093fbf9-765f-11e9-9e07-00163e01db7b",
            "resourceName": "other-auth-secret",
            "resourceType": "Secret",
            "serviceCrn": null,
            "serviceName": null,
          },
          "finding": Object {
            "certainty": "HIGH",
            "dataTransferred": null,
            "networkConnection": null,
            "nextSteps": Array [
              Object {
                "title": "View the details for the compliance problem in the occurrence of the findings.",
                "url": null,
              },
            ],
            "severity": "HIGH",
          },
          "name": "id-mycluster-account/providers/security-advisor/occurrences/secret-4093fbf9-765f-11e9-9e07-00163e01db7b",
          "reportedBy": Object {
            "id": "mcm-policy-adapter",
            "title": "Security Advisor MCM Policy Findings Adapter",
            "url": null,
          },
          "securityClassification": Object {
            "securityCategories": Array [
              "System and communications protections",
            ],
            "securityControl": "test",
            "securityStandards": Array [
              "NIST",
              "CIS",
            ],
          },
          "shortDescription": "Policy that is not compliant",
        },
        Object {
          "__typename": "Occurrence",
          "context": Object {
            "accountId": "id-mycluster-account",
            "clusterName": "cluster1",
            "namespaceName": "kube-system",
            "region": null,
            "resourceCrn": null,
            "resourceId": "4093fbf5-765f-11e9-9e07-00163e01db7b",
            "resourceName": "platform-auth-secret",
            "resourceType": "Secret",
            "serviceCrn": null,
            "serviceName": null,
          },
          "finding": Object {
            "certainty": "HIGH",
            "dataTransferred": null,
            "networkConnection": null,
            "nextSteps": Array [
              Object {
                "title": "View the details for the compliance problem in the occurrence of the findings.",
                "url": null,
              },
            ],
            "severity": "HIGH",
          },
          "name": "id-mycluster-account/providers/security-advisor/occurrences/secret-4093fbf5-765f-11e9-9e07-00163e01db7b",
          "reportedBy": Object {
            "id": "mcm-policy-adapter",
            "title": "Security Advisor MCM Policy Findings Adapter",
            "url": null,
          },
          "securityClassification": Object {
            "securityCategories": Array [
              "System and communications protections",
            ],
            "securityControl": "test",
            "securityStandards": Array [
              "NIST",
              "CIS",
            ],
          },
          "shortDescription": "Policy that is not compliant",
        },
        Object {
          "__typename": "Occurrence",
          "context": Object {
            "accountId": "id-mycluster-account",
            "clusterName": "clusterhub",
            "namespaceName": "kube-system",
            "region": null,
            "resourceCrn": null,
            "resourceId": "94fe9769-765f-11e9-9e07-00163e01db7b",
            "resourceName": "multicluster_name-hub-search-secrets",
            "resourceType": "Secret",
            "serviceCrn": null,
            "serviceName": null,
          },
          "finding": Object {
            "certainty": "HIGH",
            "dataTransferred": null,
            "networkConnection": null,
            "nextSteps": Array [
              Object {
                "title": "View the details for the compliance problem in the occurrence of the findings.",
                "url": null,
              },
            ],
            "severity": "HIGH",
          },
          "name": "id-mycluster-account/providers/security-advisor/occurrences/secret-94fe9769-765f-11e9-9e07-00163e01db7b",
          "reportedBy": Object {
            "id": "mcm-policy-adapter",
            "title": "Security Advisor MCM Policy Findings Adapter",
            "url": null,
          },
          "securityClassification": Object {
            "securityCategories": Array [
              "System and communications protections",
            ],
            "securityControl": "test",
            "securityStandards": Array [
              "NIST",
              "CIS",
            ],
          },
          "shortDescription": "Policy that is not compliant",
        },
      ]
    }
    handleDrillDownClick={[MockFunction]}
    showGrcCard={true}
    updateViewState={[MockFunction]}
    viewState={
      Object {
        "viewState": Object {
          "grcCardChoice": "categories",
        },
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <div
          className="header-container"
        >
          <div
            className="header-title"
          >
            Summary
          </div>
          <div>
            <DropdownV2
              ariaLabel="Summary"
              className="selection"
              disabled={false}
              helperText=""
              initialSelectedItem="Standards"
              inline={true}
              itemToElement={null}
              itemToString={[Function]}
              items={
                Array [
                  Object {
                    "label": "Categories",
                    "value": "categories",
                  },
                  Object {
                    "label": "Standards",
                    "value": "standards",
                  },
                ]
              }
              label="Summary"
              light={false}
              onChange={[Function]}
              titleText=""
              type="default"
            />
          </div>
          <button
            className="collapse"
            onClick={[Function]}
          >
            <span
              className="collapse-hint"
            >
              Want to see less information?
            </span>
            <span
              className="collapse-button"
            >
              Collapse summary
            </span>
            <Icon
              className="arrow-up"
              description="collapse"
              fillRule="evenodd"
              name="chevron--up"
              role="img"
            />
          </button>
        </div>,
        <div
          className="card-container-container"
        >
          <FindingCard
            data={
              Object {
                "choice": "standards",
                "counts": Object {
                  "finding": Object {
                    "currentFindings": 3,
                    "totalFindings": 3,
                  },
                  "severity": Object {
                    "highSeverity": 3,
                    "totalSeverity": 3,
                  },
                },
                "highSeverity": 3,
                "name": "CIS",
                "rawName": "CIS",
              }
            }
            handleClick={[MockFunction]}
            locale={undefined}
          />
          <FindingCard
            data={
              Object {
                "choice": "standards",
                "counts": Object {
                  "finding": Object {
                    "currentFindings": 3,
                    "totalFindings": 3,
                  },
                  "severity": Object {
                    "highSeverity": 3,
                    "totalSeverity": 3,
                  },
                },
                "highSeverity": 3,
                "name": "NIST",
                "rawName": "NIST",
              }
            }
            handleClick={[MockFunction]}
            locale={undefined}
          />
        </div>,
      ],
      "className": "module-grc-cards",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <div
              className="header-title"
            >
              Summary
            </div>,
            <div>
              <DropdownV2
                ariaLabel="Summary"
                className="selection"
                disabled={false}
                helperText=""
                initialSelectedItem="Standards"
                inline={true}
                itemToElement={null}
                itemToString={[Function]}
                items={
                  Array [
                    Object {
                      "label": "Categories",
                      "value": "categories",
                    },
                    Object {
                      "label": "Standards",
                      "value": "standards",
                    },
                  ]
                }
                label="Summary"
                light={false}
                onChange={[Function]}
                titleText=""
                type="default"
              />
            </div>,
            <button
              className="collapse"
              onClick={[Function]}
            >
              <span
                className="collapse-hint"
              >
                Want to see less information?
              </span>
              <span
                className="collapse-button"
              >
                Collapse summary
              </span>
              <Icon
                className="arrow-up"
                description="collapse"
                fillRule="evenodd"
                name="chevron--up"
                role="img"
              />
            </button>,
          ],
          "className": "header-container",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Summary",
              "className": "header-title",
            },
            "ref": null,
            "rendered": "Summary",
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <DropdownV2
                ariaLabel="Summary"
                className="selection"
                disabled={false}
                helperText=""
                initialSelectedItem="Standards"
                inline={true}
                itemToElement={null}
                itemToString={[Function]}
                items={
                  Array [
                    Object {
                      "label": "Categories",
                      "value": "categories",
                    },
                    Object {
                      "label": "Standards",
                      "value": "standards",
                    },
                  ]
                }
                label="Summary"
                light={false}
                onChange={[Function]}
                titleText=""
                type="default"
              />,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "ariaLabel": "Summary",
                "className": "selection",
                "disabled": false,
                "helperText": "",
                "initialSelectedItem": "Standards",
                "inline": true,
                "itemToElement": null,
                "itemToString": [Function],
                "items": Array [
                  Object {
                    "label": "Categories",
                    "value": "categories",
                  },
                  Object {
                    "label": "Standards",
                    "value": "standards",
                  },
                ],
                "label": "Summary",
                "light": false,
                "onChange": [Function],
                "titleText": "",
                "type": "default",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <span
                  className="collapse-hint"
                >
                  Want to see less information?
                </span>,
                <span
                  className="collapse-button"
                >
                  Collapse summary
                </span>,
                <Icon
                  className="arrow-up"
                  description="collapse"
                  fillRule="evenodd"
                  name="chevron--up"
                  role="img"
                />,
              ],
              "className": "collapse",
              "onClick": [Function],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "Want to see less information?",
                  "className": "collapse-hint",
                },
                "ref": null,
                "rendered": "Want to see less information?",
                "type": "span",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "Collapse summary",
                  "className": "collapse-button",
                },
                "ref": null,
                "rendered": "Collapse summary",
                "type": "span",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "className": "arrow-up",
                  "description": "collapse",
                  "fillRule": "evenodd",
                  "name": "chevron--up",
                  "role": "img",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
            ],
            "type": "button",
          },
        ],
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <FindingCard
              data={
                Object {
                  "choice": "standards",
                  "counts": Object {
                    "finding": Object {
                      "currentFindings": 3,
                      "totalFindings": 3,
                    },
                    "severity": Object {
                      "highSeverity": 3,
                      "totalSeverity": 3,
                    },
                  },
                  "highSeverity": 3,
                  "name": "CIS",
                  "rawName": "CIS",
                }
              }
              handleClick={[MockFunction]}
              locale={undefined}
            />,
            <FindingCard
              data={
                Object {
                  "choice": "standards",
                  "counts": Object {
                    "finding": Object {
                      "currentFindings": 3,
                      "totalFindings": 3,
                    },
                    "severity": Object {
                      "highSeverity": 3,
                      "totalSeverity": 3,
                    },
                  },
                  "highSeverity": 3,
                  "name": "NIST",
                  "rawName": "NIST",
                }
              }
              handleClick={[MockFunction]}
              locale={undefined}
            />,
          ],
          "className": "card-container-container",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": "CIS",
            "nodeType": "function",
            "props": Object {
              "data": Object {
                "choice": "standards",
                "counts": Object {
                  "finding": Object {
                    "currentFindings": 3,
                    "totalFindings": 3,
                  },
                  "severity": Object {
                    "highSeverity": 3,
                    "totalSeverity": 3,
                  },
                },
                "highSeverity": 3,
                "name": "CIS",
                "rawName": "CIS",
              },
              "handleClick": [MockFunction],
              "locale": undefined,
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": "NIST",
            "nodeType": "function",
            "props": Object {
              "data": Object {
                "choice": "standards",
                "counts": Object {
                  "finding": Object {
                    "currentFindings": 3,
                    "totalFindings": 3,
                  },
                  "severity": Object {
                    "highSeverity": 3,
                    "totalSeverity": 3,
                  },
                },
                "highSeverity": 3,
                "name": "NIST",
                "rawName": "NIST",
              },
              "handleClick": [MockFunction],
              "locale": undefined,
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": "div",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <div
            className="header-container"
          >
            <div
              className="header-title"
            >
              Summary
            </div>
            <div>
              <DropdownV2
                ariaLabel="Summary"
                className="selection"
                disabled={false}
                helperText=""
                initialSelectedItem="Standards"
                inline={true}
                itemToElement={null}
                itemToString={[Function]}
                items={
                  Array [
                    Object {
                      "label": "Categories",
                      "value": "categories",
                    },
                    Object {
                      "label": "Standards",
                      "value": "standards",
                    },
                  ]
                }
                label="Summary"
                light={false}
                onChange={[Function]}
                titleText=""
                type="default"
              />
            </div>
            <button
              className="collapse"
              onClick={[Function]}
            >
              <span
                className="collapse-hint"
              >
                Want to see less information?
              </span>
              <span
                className="collapse-button"
              >
                Collapse summary
              </span>
              <Icon
                className="arrow-up"
                description="collapse"
                fillRule="evenodd"
                name="chevron--up"
                role="img"
              />
            </button>
          </div>,
          <div
            className="card-container-container"
          >
            <FindingCard
              data={
                Object {
                  "choice": "standards",
                  "counts": Object {
                    "finding": Object {
                      "currentFindings": 3,
                      "totalFindings": 3,
                    },
                    "severity": Object {
                      "highSeverity": 3,
                      "totalSeverity": 3,
                    },
                  },
                  "highSeverity": 3,
                  "name": "CIS",
                  "rawName": "CIS",
                }
              }
              handleClick={[MockFunction]}
              locale={undefined}
            />
            <FindingCard
              data={
                Object {
                  "choice": "standards",
                  "counts": Object {
                    "finding": Object {
                      "currentFindings": 3,
                      "totalFindings": 3,
                    },
                    "severity": Object {
                      "highSeverity": 3,
                      "totalSeverity": 3,
                    },
                  },
                  "highSeverity": 3,
                  "name": "NIST",
                  "rawName": "NIST",
                }
              }
              handleClick={[MockFunction]}
              locale={undefined}
            />
          </div>,
        ],
        "className": "module-grc-cards",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <div
                className="header-title"
              >
                Summary
              </div>,
              <div>
                <DropdownV2
                  ariaLabel="Summary"
                  className="selection"
                  disabled={false}
                  helperText=""
                  initialSelectedItem="Standards"
                  inline={true}
                  itemToElement={null}
                  itemToString={[Function]}
                  items={
                    Array [
                      Object {
                        "label": "Categories",
                        "value": "categories",
                      },
                      Object {
                        "label": "Standards",
                        "value": "standards",
                      },
                    ]
                  }
                  label="Summary"
                  light={false}
                  onChange={[Function]}
                  titleText=""
                  type="default"
                />
              </div>,
              <button
                className="collapse"
                onClick={[Function]}
              >
                <span
                  className="collapse-hint"
                >
                  Want to see less information?
                </span>
                <span
                  className="collapse-button"
                >
                  Collapse summary
                </span>
                <Icon
                  className="arrow-up"
                  description="collapse"
                  fillRule="evenodd"
                  name="chevron--up"
                  role="img"
                />
              </button>,
            ],
            "className": "header-container",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Summary",
                "className": "header-title",
              },
              "ref": null,
              "rendered": "Summary",
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <DropdownV2
                  ariaLabel="Summary"
                  className="selection"
                  disabled={false}
                  helperText=""
                  initialSelectedItem="Standards"
                  inline={true}
                  itemToElement={null}
                  itemToString={[Function]}
                  items={
                    Array [
                      Object {
                        "label": "Categories",
                        "value": "categories",
                      },
                      Object {
                        "label": "Standards",
                        "value": "standards",
                      },
                    ]
                  }
                  label="Summary"
                  light={false}
                  onChange={[Function]}
                  titleText=""
                  type="default"
                />,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "ariaLabel": "Summary",
                  "className": "selection",
                  "disabled": false,
                  "helperText": "",
                  "initialSelectedItem": "Standards",
                  "inline": true,
                  "itemToElement": null,
                  "itemToString": [Function],
                  "items": Array [
                    Object {
                      "label": "Categories",
                      "value": "categories",
                    },
                    Object {
                      "label": "Standards",
                      "value": "standards",
                    },
                  ],
                  "label": "Summary",
                  "light": false,
                  "onChange": [Function],
                  "titleText": "",
                  "type": "default",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <span
                    className="collapse-hint"
                  >
                    Want to see less information?
                  </span>,
                  <span
                    className="collapse-button"
                  >
                    Collapse summary
                  </span>,
                  <Icon
                    className="arrow-up"
                    description="collapse"
                    fillRule="evenodd"
                    name="chevron--up"
                    role="img"
                  />,
                ],
                "className": "collapse",
                "onClick": [Function],
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "Want to see less information?",
                    "className": "collapse-hint",
                  },
                  "ref": null,
                  "rendered": "Want to see less information?",
                  "type": "span",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "Collapse summary",
                    "className": "collapse-button",
                  },
                  "ref": null,
                  "rendered": "Collapse summary",
                  "type": "span",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "className": "arrow-up",
                    "description": "collapse",
                    "fillRule": "evenodd",
                    "name": "chevron--up",
                    "role": "img",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
              ],
              "type": "button",
            },
          ],
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <FindingCard
                data={
                  Object {
                    "choice": "standards",
                    "counts": Object {
                      "finding": Object {
                        "currentFindings": 3,
                        "totalFindings": 3,
                      },
                      "severity": Object {
                        "highSeverity": 3,
                        "totalSeverity": 3,
                      },
                    },
                    "highSeverity": 3,
                    "name": "CIS",
                    "rawName": "CIS",
                  }
                }
                handleClick={[MockFunction]}
                locale={undefined}
              />,
              <FindingCard
                data={
                  Object {
                    "choice": "standards",
                    "counts": Object {
                      "finding": Object {
                        "currentFindings": 3,
                        "totalFindings": 3,
                      },
                      "severity": Object {
                        "highSeverity": 3,
                        "totalSeverity": 3,
                      },
                    },
                    "highSeverity": 3,
                    "name": "NIST",
                    "rawName": "NIST",
                  }
                }
                handleClick={[MockFunction]}
                locale={undefined}
              />,
            ],
            "className": "card-container-container",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": "CIS",
              "nodeType": "function",
              "props": Object {
                "data": Object {
                  "choice": "standards",
                  "counts": Object {
                    "finding": Object {
                      "currentFindings": 3,
                      "totalFindings": 3,
                    },
                    "severity": Object {
                      "highSeverity": 3,
                      "totalSeverity": 3,
                    },
                  },
                  "highSeverity": 3,
                  "name": "CIS",
                  "rawName": "CIS",
                },
                "handleClick": [MockFunction],
                "locale": undefined,
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": "NIST",
              "nodeType": "function",
              "props": Object {
                "data": Object {
                  "choice": "standards",
                  "counts": Object {
                    "finding": Object {
                      "currentFindings": 3,
                      "totalFindings": 3,
                    },
                    "severity": Object {
                      "highSeverity": 3,
                      "totalSeverity": 3,
                    },
                  },
                  "highSeverity": 3,
                  "name": "NIST",
                  "rawName": "NIST",
                },
                "handleClick": [MockFunction],
                "locale": undefined,
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": "div",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": true,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    Symbol(enzyme.__providerValues__): undefined,
  },
  Symbol(enzyme.__providerValues__): Map {},
  Symbol(enzyme.__childContext__): null,
}
`;

exports[`GrcCardsModule findings page standards view renders collapse as expected 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <GrcCardsModule
    activeFilters={
      Object {
        "activeFilters": Object {},
      }
    }
    displayType="findings"
    grcItems={
      Array [
        Object {
          "__typename": "Occurrence",
          "context": Object {
            "accountId": "id-mycluster-account",
            "clusterName": "mycluster_name",
            "namespaceName": "kube-system",
            "region": null,
            "resourceCrn": null,
            "resourceId": "4093fbf9-765f-11e9-9e07-00163e01db7b",
            "resourceName": "other-auth-secret",
            "resourceType": "Secret",
            "serviceCrn": null,
            "serviceName": null,
          },
          "finding": Object {
            "certainty": "HIGH",
            "dataTransferred": null,
            "networkConnection": null,
            "nextSteps": Array [
              Object {
                "title": "View the details for the compliance problem in the occurrence of the findings.",
                "url": null,
              },
            ],
            "severity": "HIGH",
          },
          "name": "id-mycluster-account/providers/security-advisor/occurrences/secret-4093fbf9-765f-11e9-9e07-00163e01db7b",
          "reportedBy": Object {
            "id": "mcm-policy-adapter",
            "title": "Security Advisor MCM Policy Findings Adapter",
            "url": null,
          },
          "securityClassification": Object {
            "securityCategories": Array [
              "System and communications protections",
            ],
            "securityControl": "test",
            "securityStandards": Array [
              "NIST",
              "CIS",
            ],
          },
          "shortDescription": "Policy that is not compliant",
        },
        Object {
          "__typename": "Occurrence",
          "context": Object {
            "accountId": "id-mycluster-account",
            "clusterName": "cluster1",
            "namespaceName": "kube-system",
            "region": null,
            "resourceCrn": null,
            "resourceId": "4093fbf5-765f-11e9-9e07-00163e01db7b",
            "resourceName": "platform-auth-secret",
            "resourceType": "Secret",
            "serviceCrn": null,
            "serviceName": null,
          },
          "finding": Object {
            "certainty": "HIGH",
            "dataTransferred": null,
            "networkConnection": null,
            "nextSteps": Array [
              Object {
                "title": "View the details for the compliance problem in the occurrence of the findings.",
                "url": null,
              },
            ],
            "severity": "HIGH",
          },
          "name": "id-mycluster-account/providers/security-advisor/occurrences/secret-4093fbf5-765f-11e9-9e07-00163e01db7b",
          "reportedBy": Object {
            "id": "mcm-policy-adapter",
            "title": "Security Advisor MCM Policy Findings Adapter",
            "url": null,
          },
          "securityClassification": Object {
            "securityCategories": Array [
              "System and communications protections",
            ],
            "securityControl": "test",
            "securityStandards": Array [
              "NIST",
              "CIS",
            ],
          },
          "shortDescription": "Policy that is not compliant",
        },
        Object {
          "__typename": "Occurrence",
          "context": Object {
            "accountId": "id-mycluster-account",
            "clusterName": "clusterhub",
            "namespaceName": "kube-system",
            "region": null,
            "resourceCrn": null,
            "resourceId": "94fe9769-765f-11e9-9e07-00163e01db7b",
            "resourceName": "multicluster_name-hub-search-secrets",
            "resourceType": "Secret",
            "serviceCrn": null,
            "serviceName": null,
          },
          "finding": Object {
            "certainty": "HIGH",
            "dataTransferred": null,
            "networkConnection": null,
            "nextSteps": Array [
              Object {
                "title": "View the details for the compliance problem in the occurrence of the findings.",
                "url": null,
              },
            ],
            "severity": "HIGH",
          },
          "name": "id-mycluster-account/providers/security-advisor/occurrences/secret-94fe9769-765f-11e9-9e07-00163e01db7b",
          "reportedBy": Object {
            "id": "mcm-policy-adapter",
            "title": "Security Advisor MCM Policy Findings Adapter",
            "url": null,
          },
          "securityClassification": Object {
            "securityCategories": Array [
              "System and communications protections",
            ],
            "securityControl": "test",
            "securityStandards": Array [
              "NIST",
              "CIS",
            ],
          },
          "shortDescription": "Policy that is not compliant",
        },
      ]
    }
    handleDrillDownClick={[MockFunction]}
    showGrcCard={false}
    updateViewState={[MockFunction]}
    viewState={
      Object {
        "viewState": Object {
          "grcCardChoice": "standards",
        },
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <div
          className="header-container card-collapsed"
        >
          <button
            className="collapse"
            onClick={[Function]}
          >
            <span
              className="collapse-hint"
            >
              Want to see your summary cards?
            </span>
            <span
              className="collapse-button"
            >
              Expand summary
            </span>
            <Icon
              className="arrow-down"
              description="expand"
              fillRule="evenodd"
              name="chevron--down"
              role="img"
            />
          </button>
        </div>,
        false,
      ],
      "className": "module-grc-cards",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            false,
            false,
            <button
              className="collapse"
              onClick={[Function]}
            >
              <span
                className="collapse-hint"
              >
                Want to see your summary cards?
              </span>
              <span
                className="collapse-button"
              >
                Expand summary
              </span>
              <Icon
                className="arrow-down"
                description="expand"
                fillRule="evenodd"
                name="chevron--down"
                role="img"
              />
            </button>,
          ],
          "className": "header-container card-collapsed",
        },
        "ref": null,
        "rendered": Array [
          false,
          false,
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <span
                  className="collapse-hint"
                >
                  Want to see your summary cards?
                </span>,
                <span
                  className="collapse-button"
                >
                  Expand summary
                </span>,
                <Icon
                  className="arrow-down"
                  description="expand"
                  fillRule="evenodd"
                  name="chevron--down"
                  role="img"
                />,
              ],
              "className": "collapse",
              "onClick": [Function],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "Want to see your summary cards?",
                  "className": "collapse-hint",
                },
                "ref": null,
                "rendered": "Want to see your summary cards?",
                "type": "span",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "Expand summary",
                  "className": "collapse-button",
                },
                "ref": null,
                "rendered": "Expand summary",
                "type": "span",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "className": "arrow-down",
                  "description": "expand",
                  "fillRule": "evenodd",
                  "name": "chevron--down",
                  "role": "img",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
            ],
            "type": "button",
          },
        ],
        "type": "div",
      },
      false,
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <div
            className="header-container card-collapsed"
          >
            <button
              className="collapse"
              onClick={[Function]}
            >
              <span
                className="collapse-hint"
              >
                Want to see your summary cards?
              </span>
              <span
                className="collapse-button"
              >
                Expand summary
              </span>
              <Icon
                className="arrow-down"
                description="expand"
                fillRule="evenodd"
                name="chevron--down"
                role="img"
              />
            </button>
          </div>,
          false,
        ],
        "className": "module-grc-cards",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              false,
              false,
              <button
                className="collapse"
                onClick={[Function]}
              >
                <span
                  className="collapse-hint"
                >
                  Want to see your summary cards?
                </span>
                <span
                  className="collapse-button"
                >
                  Expand summary
                </span>
                <Icon
                  className="arrow-down"
                  description="expand"
                  fillRule="evenodd"
                  name="chevron--down"
                  role="img"
                />
              </button>,
            ],
            "className": "header-container card-collapsed",
          },
          "ref": null,
          "rendered": Array [
            false,
            false,
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <span
                    className="collapse-hint"
                  >
                    Want to see your summary cards?
                  </span>,
                  <span
                    className="collapse-button"
                  >
                    Expand summary
                  </span>,
                  <Icon
                    className="arrow-down"
                    description="expand"
                    fillRule="evenodd"
                    name="chevron--down"
                    role="img"
                  />,
                ],
                "className": "collapse",
                "onClick": [Function],
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "Want to see your summary cards?",
                    "className": "collapse-hint",
                  },
                  "ref": null,
                  "rendered": "Want to see your summary cards?",
                  "type": "span",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "Expand summary",
                    "className": "collapse-button",
                  },
                  "ref": null,
                  "rendered": "Expand summary",
                  "type": "span",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "className": "arrow-down",
                    "description": "expand",
                    "fillRule": "evenodd",
                    "name": "chevron--down",
                    "role": "img",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
              ],
              "type": "button",
            },
          ],
          "type": "div",
        },
        false,
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": true,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    Symbol(enzyme.__providerValues__): undefined,
  },
  Symbol(enzyme.__providerValues__): Map {},
  Symbol(enzyme.__childContext__): null,
}
`;

exports[`GrcCardsModule findings page standards view renders expand as expected 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <GrcCardsModule
    activeFilters={
      Object {
        "activeFilters": Object {},
      }
    }
    displayType="findings"
    grcItems={
      Array [
        Object {
          "__typename": "Occurrence",
          "context": Object {
            "accountId": "id-mycluster-account",
            "clusterName": "mycluster_name",
            "namespaceName": "kube-system",
            "region": null,
            "resourceCrn": null,
            "resourceId": "4093fbf9-765f-11e9-9e07-00163e01db7b",
            "resourceName": "other-auth-secret",
            "resourceType": "Secret",
            "serviceCrn": null,
            "serviceName": null,
          },
          "finding": Object {
            "certainty": "HIGH",
            "dataTransferred": null,
            "networkConnection": null,
            "nextSteps": Array [
              Object {
                "title": "View the details for the compliance problem in the occurrence of the findings.",
                "url": null,
              },
            ],
            "severity": "HIGH",
          },
          "name": "id-mycluster-account/providers/security-advisor/occurrences/secret-4093fbf9-765f-11e9-9e07-00163e01db7b",
          "reportedBy": Object {
            "id": "mcm-policy-adapter",
            "title": "Security Advisor MCM Policy Findings Adapter",
            "url": null,
          },
          "securityClassification": Object {
            "securityCategories": Array [
              "System and communications protections",
            ],
            "securityControl": "test",
            "securityStandards": Array [
              "NIST",
              "CIS",
            ],
          },
          "shortDescription": "Policy that is not compliant",
        },
        Object {
          "__typename": "Occurrence",
          "context": Object {
            "accountId": "id-mycluster-account",
            "clusterName": "cluster1",
            "namespaceName": "kube-system",
            "region": null,
            "resourceCrn": null,
            "resourceId": "4093fbf5-765f-11e9-9e07-00163e01db7b",
            "resourceName": "platform-auth-secret",
            "resourceType": "Secret",
            "serviceCrn": null,
            "serviceName": null,
          },
          "finding": Object {
            "certainty": "HIGH",
            "dataTransferred": null,
            "networkConnection": null,
            "nextSteps": Array [
              Object {
                "title": "View the details for the compliance problem in the occurrence of the findings.",
                "url": null,
              },
            ],
            "severity": "HIGH",
          },
          "name": "id-mycluster-account/providers/security-advisor/occurrences/secret-4093fbf5-765f-11e9-9e07-00163e01db7b",
          "reportedBy": Object {
            "id": "mcm-policy-adapter",
            "title": "Security Advisor MCM Policy Findings Adapter",
            "url": null,
          },
          "securityClassification": Object {
            "securityCategories": Array [
              "System and communications protections",
            ],
            "securityControl": "test",
            "securityStandards": Array [
              "NIST",
              "CIS",
            ],
          },
          "shortDescription": "Policy that is not compliant",
        },
        Object {
          "__typename": "Occurrence",
          "context": Object {
            "accountId": "id-mycluster-account",
            "clusterName": "clusterhub",
            "namespaceName": "kube-system",
            "region": null,
            "resourceCrn": null,
            "resourceId": "94fe9769-765f-11e9-9e07-00163e01db7b",
            "resourceName": "multicluster_name-hub-search-secrets",
            "resourceType": "Secret",
            "serviceCrn": null,
            "serviceName": null,
          },
          "finding": Object {
            "certainty": "HIGH",
            "dataTransferred": null,
            "networkConnection": null,
            "nextSteps": Array [
              Object {
                "title": "View the details for the compliance problem in the occurrence of the findings.",
                "url": null,
              },
            ],
            "severity": "HIGH",
          },
          "name": "id-mycluster-account/providers/security-advisor/occurrences/secret-94fe9769-765f-11e9-9e07-00163e01db7b",
          "reportedBy": Object {
            "id": "mcm-policy-adapter",
            "title": "Security Advisor MCM Policy Findings Adapter",
            "url": null,
          },
          "securityClassification": Object {
            "securityCategories": Array [
              "System and communications protections",
            ],
            "securityControl": "test",
            "securityStandards": Array [
              "NIST",
              "CIS",
            ],
          },
          "shortDescription": "Policy that is not compliant",
        },
      ]
    }
    handleDrillDownClick={[MockFunction]}
    showGrcCard={true}
    updateViewState={[MockFunction]}
    viewState={
      Object {
        "viewState": Object {
          "grcCardChoice": "standards",
        },
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <div
          className="header-container"
        >
          <div
            className="header-title"
          >
            Summary
          </div>
          <div>
            <DropdownV2
              ariaLabel="Summary"
              className="selection"
              disabled={false}
              helperText=""
              initialSelectedItem="Standards"
              inline={true}
              itemToElement={null}
              itemToString={[Function]}
              items={
                Array [
                  Object {
                    "label": "Categories",
                    "value": "categories",
                  },
                  Object {
                    "label": "Standards",
                    "value": "standards",
                  },
                ]
              }
              label="Summary"
              light={false}
              onChange={[Function]}
              titleText=""
              type="default"
            />
          </div>
          <button
            className="collapse"
            onClick={[Function]}
          >
            <span
              className="collapse-hint"
            >
              Want to see less information?
            </span>
            <span
              className="collapse-button"
            >
              Collapse summary
            </span>
            <Icon
              className="arrow-up"
              description="collapse"
              fillRule="evenodd"
              name="chevron--up"
              role="img"
            />
          </button>
        </div>,
        <div
          className="card-container-container"
        >
          <FindingCard
            data={
              Object {
                "choice": "standards",
                "counts": Object {
                  "finding": Object {
                    "currentFindings": 3,
                    "totalFindings": 3,
                  },
                  "severity": Object {
                    "highSeverity": 3,
                    "totalSeverity": 3,
                  },
                },
                "highSeverity": 3,
                "name": "CIS",
                "rawName": "CIS",
              }
            }
            handleClick={[MockFunction]}
            locale={undefined}
          />
          <FindingCard
            data={
              Object {
                "choice": "standards",
                "counts": Object {
                  "finding": Object {
                    "currentFindings": 3,
                    "totalFindings": 3,
                  },
                  "severity": Object {
                    "highSeverity": 3,
                    "totalSeverity": 3,
                  },
                },
                "highSeverity": 3,
                "name": "NIST",
                "rawName": "NIST",
              }
            }
            handleClick={[MockFunction]}
            locale={undefined}
          />
        </div>,
      ],
      "className": "module-grc-cards",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <div
              className="header-title"
            >
              Summary
            </div>,
            <div>
              <DropdownV2
                ariaLabel="Summary"
                className="selection"
                disabled={false}
                helperText=""
                initialSelectedItem="Standards"
                inline={true}
                itemToElement={null}
                itemToString={[Function]}
                items={
                  Array [
                    Object {
                      "label": "Categories",
                      "value": "categories",
                    },
                    Object {
                      "label": "Standards",
                      "value": "standards",
                    },
                  ]
                }
                label="Summary"
                light={false}
                onChange={[Function]}
                titleText=""
                type="default"
              />
            </div>,
            <button
              className="collapse"
              onClick={[Function]}
            >
              <span
                className="collapse-hint"
              >
                Want to see less information?
              </span>
              <span
                className="collapse-button"
              >
                Collapse summary
              </span>
              <Icon
                className="arrow-up"
                description="collapse"
                fillRule="evenodd"
                name="chevron--up"
                role="img"
              />
            </button>,
          ],
          "className": "header-container",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Summary",
              "className": "header-title",
            },
            "ref": null,
            "rendered": "Summary",
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <DropdownV2
                ariaLabel="Summary"
                className="selection"
                disabled={false}
                helperText=""
                initialSelectedItem="Standards"
                inline={true}
                itemToElement={null}
                itemToString={[Function]}
                items={
                  Array [
                    Object {
                      "label": "Categories",
                      "value": "categories",
                    },
                    Object {
                      "label": "Standards",
                      "value": "standards",
                    },
                  ]
                }
                label="Summary"
                light={false}
                onChange={[Function]}
                titleText=""
                type="default"
              />,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "ariaLabel": "Summary",
                "className": "selection",
                "disabled": false,
                "helperText": "",
                "initialSelectedItem": "Standards",
                "inline": true,
                "itemToElement": null,
                "itemToString": [Function],
                "items": Array [
                  Object {
                    "label": "Categories",
                    "value": "categories",
                  },
                  Object {
                    "label": "Standards",
                    "value": "standards",
                  },
                ],
                "label": "Summary",
                "light": false,
                "onChange": [Function],
                "titleText": "",
                "type": "default",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <span
                  className="collapse-hint"
                >
                  Want to see less information?
                </span>,
                <span
                  className="collapse-button"
                >
                  Collapse summary
                </span>,
                <Icon
                  className="arrow-up"
                  description="collapse"
                  fillRule="evenodd"
                  name="chevron--up"
                  role="img"
                />,
              ],
              "className": "collapse",
              "onClick": [Function],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "Want to see less information?",
                  "className": "collapse-hint",
                },
                "ref": null,
                "rendered": "Want to see less information?",
                "type": "span",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "Collapse summary",
                  "className": "collapse-button",
                },
                "ref": null,
                "rendered": "Collapse summary",
                "type": "span",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "className": "arrow-up",
                  "description": "collapse",
                  "fillRule": "evenodd",
                  "name": "chevron--up",
                  "role": "img",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
            ],
            "type": "button",
          },
        ],
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <FindingCard
              data={
                Object {
                  "choice": "standards",
                  "counts": Object {
                    "finding": Object {
                      "currentFindings": 3,
                      "totalFindings": 3,
                    },
                    "severity": Object {
                      "highSeverity": 3,
                      "totalSeverity": 3,
                    },
                  },
                  "highSeverity": 3,
                  "name": "CIS",
                  "rawName": "CIS",
                }
              }
              handleClick={[MockFunction]}
              locale={undefined}
            />,
            <FindingCard
              data={
                Object {
                  "choice": "standards",
                  "counts": Object {
                    "finding": Object {
                      "currentFindings": 3,
                      "totalFindings": 3,
                    },
                    "severity": Object {
                      "highSeverity": 3,
                      "totalSeverity": 3,
                    },
                  },
                  "highSeverity": 3,
                  "name": "NIST",
                  "rawName": "NIST",
                }
              }
              handleClick={[MockFunction]}
              locale={undefined}
            />,
          ],
          "className": "card-container-container",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": "CIS",
            "nodeType": "function",
            "props": Object {
              "data": Object {
                "choice": "standards",
                "counts": Object {
                  "finding": Object {
                    "currentFindings": 3,
                    "totalFindings": 3,
                  },
                  "severity": Object {
                    "highSeverity": 3,
                    "totalSeverity": 3,
                  },
                },
                "highSeverity": 3,
                "name": "CIS",
                "rawName": "CIS",
              },
              "handleClick": [MockFunction],
              "locale": undefined,
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": "NIST",
            "nodeType": "function",
            "props": Object {
              "data": Object {
                "choice": "standards",
                "counts": Object {
                  "finding": Object {
                    "currentFindings": 3,
                    "totalFindings": 3,
                  },
                  "severity": Object {
                    "highSeverity": 3,
                    "totalSeverity": 3,
                  },
                },
                "highSeverity": 3,
                "name": "NIST",
                "rawName": "NIST",
              },
              "handleClick": [MockFunction],
              "locale": undefined,
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": "div",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <div
            className="header-container"
          >
            <div
              className="header-title"
            >
              Summary
            </div>
            <div>
              <DropdownV2
                ariaLabel="Summary"
                className="selection"
                disabled={false}
                helperText=""
                initialSelectedItem="Standards"
                inline={true}
                itemToElement={null}
                itemToString={[Function]}
                items={
                  Array [
                    Object {
                      "label": "Categories",
                      "value": "categories",
                    },
                    Object {
                      "label": "Standards",
                      "value": "standards",
                    },
                  ]
                }
                label="Summary"
                light={false}
                onChange={[Function]}
                titleText=""
                type="default"
              />
            </div>
            <button
              className="collapse"
              onClick={[Function]}
            >
              <span
                className="collapse-hint"
              >
                Want to see less information?
              </span>
              <span
                className="collapse-button"
              >
                Collapse summary
              </span>
              <Icon
                className="arrow-up"
                description="collapse"
                fillRule="evenodd"
                name="chevron--up"
                role="img"
              />
            </button>
          </div>,
          <div
            className="card-container-container"
          >
            <FindingCard
              data={
                Object {
                  "choice": "standards",
                  "counts": Object {
                    "finding": Object {
                      "currentFindings": 3,
                      "totalFindings": 3,
                    },
                    "severity": Object {
                      "highSeverity": 3,
                      "totalSeverity": 3,
                    },
                  },
                  "highSeverity": 3,
                  "name": "CIS",
                  "rawName": "CIS",
                }
              }
              handleClick={[MockFunction]}
              locale={undefined}
            />
            <FindingCard
              data={
                Object {
                  "choice": "standards",
                  "counts": Object {
                    "finding": Object {
                      "currentFindings": 3,
                      "totalFindings": 3,
                    },
                    "severity": Object {
                      "highSeverity": 3,
                      "totalSeverity": 3,
                    },
                  },
                  "highSeverity": 3,
                  "name": "NIST",
                  "rawName": "NIST",
                }
              }
              handleClick={[MockFunction]}
              locale={undefined}
            />
          </div>,
        ],
        "className": "module-grc-cards",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <div
                className="header-title"
              >
                Summary
              </div>,
              <div>
                <DropdownV2
                  ariaLabel="Summary"
                  className="selection"
                  disabled={false}
                  helperText=""
                  initialSelectedItem="Standards"
                  inline={true}
                  itemToElement={null}
                  itemToString={[Function]}
                  items={
                    Array [
                      Object {
                        "label": "Categories",
                        "value": "categories",
                      },
                      Object {
                        "label": "Standards",
                        "value": "standards",
                      },
                    ]
                  }
                  label="Summary"
                  light={false}
                  onChange={[Function]}
                  titleText=""
                  type="default"
                />
              </div>,
              <button
                className="collapse"
                onClick={[Function]}
              >
                <span
                  className="collapse-hint"
                >
                  Want to see less information?
                </span>
                <span
                  className="collapse-button"
                >
                  Collapse summary
                </span>
                <Icon
                  className="arrow-up"
                  description="collapse"
                  fillRule="evenodd"
                  name="chevron--up"
                  role="img"
                />
              </button>,
            ],
            "className": "header-container",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Summary",
                "className": "header-title",
              },
              "ref": null,
              "rendered": "Summary",
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <DropdownV2
                  ariaLabel="Summary"
                  className="selection"
                  disabled={false}
                  helperText=""
                  initialSelectedItem="Standards"
                  inline={true}
                  itemToElement={null}
                  itemToString={[Function]}
                  items={
                    Array [
                      Object {
                        "label": "Categories",
                        "value": "categories",
                      },
                      Object {
                        "label": "Standards",
                        "value": "standards",
                      },
                    ]
                  }
                  label="Summary"
                  light={false}
                  onChange={[Function]}
                  titleText=""
                  type="default"
                />,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "ariaLabel": "Summary",
                  "className": "selection",
                  "disabled": false,
                  "helperText": "",
                  "initialSelectedItem": "Standards",
                  "inline": true,
                  "itemToElement": null,
                  "itemToString": [Function],
                  "items": Array [
                    Object {
                      "label": "Categories",
                      "value": "categories",
                    },
                    Object {
                      "label": "Standards",
                      "value": "standards",
                    },
                  ],
                  "label": "Summary",
                  "light": false,
                  "onChange": [Function],
                  "titleText": "",
                  "type": "default",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <span
                    className="collapse-hint"
                  >
                    Want to see less information?
                  </span>,
                  <span
                    className="collapse-button"
                  >
                    Collapse summary
                  </span>,
                  <Icon
                    className="arrow-up"
                    description="collapse"
                    fillRule="evenodd"
                    name="chevron--up"
                    role="img"
                  />,
                ],
                "className": "collapse",
                "onClick": [Function],
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "Want to see less information?",
                    "className": "collapse-hint",
                  },
                  "ref": null,
                  "rendered": "Want to see less information?",
                  "type": "span",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "Collapse summary",
                    "className": "collapse-button",
                  },
                  "ref": null,
                  "rendered": "Collapse summary",
                  "type": "span",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "className": "arrow-up",
                    "description": "collapse",
                    "fillRule": "evenodd",
                    "name": "chevron--up",
                    "role": "img",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
              ],
              "type": "button",
            },
          ],
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <FindingCard
                data={
                  Object {
                    "choice": "standards",
                    "counts": Object {
                      "finding": Object {
                        "currentFindings": 3,
                        "totalFindings": 3,
                      },
                      "severity": Object {
                        "highSeverity": 3,
                        "totalSeverity": 3,
                      },
                    },
                    "highSeverity": 3,
                    "name": "CIS",
                    "rawName": "CIS",
                  }
                }
                handleClick={[MockFunction]}
                locale={undefined}
              />,
              <FindingCard
                data={
                  Object {
                    "choice": "standards",
                    "counts": Object {
                      "finding": Object {
                        "currentFindings": 3,
                        "totalFindings": 3,
                      },
                      "severity": Object {
                        "highSeverity": 3,
                        "totalSeverity": 3,
                      },
                    },
                    "highSeverity": 3,
                    "name": "NIST",
                    "rawName": "NIST",
                  }
                }
                handleClick={[MockFunction]}
                locale={undefined}
              />,
            ],
            "className": "card-container-container",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": "CIS",
              "nodeType": "function",
              "props": Object {
                "data": Object {
                  "choice": "standards",
                  "counts": Object {
                    "finding": Object {
                      "currentFindings": 3,
                      "totalFindings": 3,
                    },
                    "severity": Object {
                      "highSeverity": 3,
                      "totalSeverity": 3,
                    },
                  },
                  "highSeverity": 3,
                  "name": "CIS",
                  "rawName": "CIS",
                },
                "handleClick": [MockFunction],
                "locale": undefined,
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": "NIST",
              "nodeType": "function",
              "props": Object {
                "data": Object {
                  "choice": "standards",
                  "counts": Object {
                    "finding": Object {
                      "currentFindings": 3,
                      "totalFindings": 3,
                    },
                    "severity": Object {
                      "highSeverity": 3,
                      "totalSeverity": 3,
                    },
                  },
                  "highSeverity": 3,
                  "name": "NIST",
                  "rawName": "NIST",
                },
                "handleClick": [MockFunction],
                "locale": undefined,
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": "div",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": true,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    Symbol(enzyme.__providerValues__): undefined,
  },
  Symbol(enzyme.__providerValues__): Map {},
  Symbol(enzyme.__childContext__): null,
}
`;

exports[`GrcCardsModule policies page categories view renders collapse as expected 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <GrcCardsModule
    activeFilters={
      Object {
        "activeFilters": Object {},
      }
    }
    displayType="other"
    grcItems={
      Array [
        Object {
          "__typename": "Compliance",
          "clusterCompliant": "2/2",
          "clusterNS": Object {
            "beldams": "beldams",
            "cetane": "cetane",
            "djebel": "djebel",
          },
          "metadata": Object {
            "__typename": "Metadata",
            "annotations": Object {
              "seed-generation": "1",
            },
            "name": "compliance-all",
            "namespace": "mcm",
            "resourceVersion": "1071070",
            "selfLink": "/apis/compliance.mcm.ibm.com/v1alpha1/namespaces/mcm/compliances/compliance-all",
          },
          "name": "compliance-all",
          "namespace": "mcm",
          "placementBindings": Array [
            Object {
              "__typename": "PlacementBinding",
              "metadata": Object {
                "__typename": "Metadata",
                "name": "binding-comp",
                "selfLink": "/apis/mcm.ibm.com/v1alpha1/namespaces/mcm/placementbindings/binding-comp",
              },
            },
          ],
          "placementPolicies": Array [
            Object {
              "__typename": "PlacementPolicy",
              "metadata": Object {
                "__typename": "Metadata",
                "name": "placement-comp",
                "selfLink": "/apis/mcm.ibm.com/v1alpha1/namespaces/mcm/placementpolicies/placement-comp",
              },
            },
          ],
          "policyCompliant": "2/2",
          "raw": Object {
            "apiVersion": "compliance.mcm.ibm.com/v1alpha1",
            "kind": "Compliance",
            "metadata": Object {
              "annotations": Object {
                "seed-generation": "1",
              },
              "creationTimestamp": "2019-05-21T14:02:49Z",
              "finalizers": Array [
                "propagator.finalizer.mcm.ibm.com",
              ],
              "generation": 6,
              "name": "compliance-all",
              "namespace": "mcm",
              "resourceVersion": "1071070",
              "selfLink": "/apis/compliance.mcm.ibm.com/v1alpha1/namespaces/mcm/compliances/compliance-all",
              "uid": "1e04ec63-7bd1-11e9-820c-005056a061f1",
            },
            "spec": Object {
              "runtime-rules": Array [
                Object {
                  "apiVersion": "policy.mcm.ibm.com/v1alpha1",
                  "kind": "Policy",
                  "metadata": Object {
                    "creationTimestamp": null,
                    "labels": Object {
                      "cis-docker": "true",
                    },
                    "name": "policy-comp",
                  },
                  "spec": Object {
                    "complianceType": "musthave",
                    "namespaces": Object {
                      "exclude": Array [
                        "kube*",
                      ],
                      "include": Array [
                        "default",
                      ],
                    },
                    "object-templates": Array [
                      Object {
                        "complianceType": "musthave",
                        "objectDefinition": Object {
                          "apiVersion": "rbac.authorization.k8s.io/v1",
                          "kind": "RoleBinding",
                          "metadata": Object {
                            "name": "operate-pods-rolebinding",
                            "namespace": "default",
                          },
                          "roleRef": Object {
                            "apiGroup": "rbac.authorization.k8s.io",
                            "kind": "Role",
                            "name": "operator",
                          },
                          "subjects": Array [
                            Object {
                              "apiGroup": "rbac.authorization.k8s.io",
                              "kind": "User",
                              "name": "admin",
                            },
                          ],
                        },
                        "status": Object {
                          "Validity": Object {},
                        },
                      },
                      Object {
                        "complianceType": "musthave",
                        "objectDefinition": Object {
                          "apiVersion": "policy/v1beta1",
                          "kind": "PodSecurityPolicy",
                          "metadata": Object {
                            "annotations": Object {
                              "seccomp.security.alpha.kubernetes.io/allowedProfileNames": "*",
                            },
                            "name": "restricted-mcm",
                          },
                          "spec": Object {
                            "allowPrivilegeEscalation": false,
                            "allowedCapabilities": Array [
                              "*",
                            ],
                            "fsGroup": Object {
                              "rule": "RunAsAny",
                            },
                            "hostIPC": false,
                            "hostNetwork": true,
                            "hostPID": false,
                            "hostPorts": Array [
                              Object {
                                "max": 65535,
                                "min": 1000,
                              },
                            ],
                            "privileged": false,
                            "runAsUser": Object {
                              "rule": "RunAsAny",
                            },
                            "seLinux": Object {
                              "rule": "RunAsAny",
                            },
                            "supplementalGroups": Object {
                              "rule": "RunAsAny",
                            },
                            "volumes": Array [
                              "*",
                            ],
                          },
                        },
                        "status": Object {
                          "Validity": Object {},
                        },
                      },
                      Object {
                        "complianceType": "musthave",
                        "objectDefinition": Object {
                          "apiVersion": "networking.k8s.io/v1",
                          "kind": "NetworkPolicy",
                          "metadata": Object {
                            "name": "deny-from-other-namespaces",
                            "namespace": "default",
                          },
                          "spec": Object {
                            "ingress": Array [
                              Object {
                                "from": Array [
                                  Object {
                                    "podSelector": Object {},
                                  },
                                ],
                              },
                            ],
                            "podSelector": Object {
                              "matchLabels": null,
                            },
                          },
                        },
                        "status": Object {
                          "Validity": Object {},
                        },
                      },
                      Object {
                        "complianceType": "musthave",
                        "objectDefinition": Object {
                          "apiVersion": "v1",
                          "kind": "LimitRange",
                          "metadata": Object {
                            "name": "mem-limit-range",
                          },
                          "spec": Object {
                            "limits": Array [
                              Object {
                                "default": Object {
                                  "memory": "512Mi",
                                },
                                "defaultRequest": Object {
                                  "memory": "256Mi",
                                },
                                "type": "Container",
                              },
                            ],
                          },
                        },
                        "status": Object {
                          "Validity": Object {},
                        },
                      },
                    ],
                    "remediationAction": "inform",
                    "role-templates": Array [
                      Object {
                        "apiVersion": "roletemplate.mcm.ibm.com/v1alpha1",
                        "complianceType": "musthave",
                        "metadata": Object {
                          "creationTimestamp": null,
                          "name": "operator-role",
                        },
                        "rules": Array [
                          Object {
                            "complianceType": "mustnothave",
                            "policyRule": Object {
                              "apiGroups": Array [
                                "core",
                              ],
                              "resources": Array [
                                "secrets",
                              ],
                              "verbs": Array [
                                "get",
                                "list",
                                "watch",
                                "delete",
                                "create",
                                "update",
                                "patch",
                              ],
                            },
                          },
                          Object {
                            "complianceType": "musthave",
                            "policyRule": Object {
                              "apiGroups": Array [
                                "core",
                              ],
                              "resources": Array [
                                "pods",
                              ],
                              "verbs": Array [
                                "get",
                                "list",
                                "watch",
                              ],
                            },
                          },
                        ],
                        "selector": Object {
                          "matchLabels": Object {
                            "dev": "true",
                          },
                        },
                        "status": Object {
                          "Validity": Object {},
                        },
                      },
                    ],
                  },
                  "status": Object {},
                },
              ],
            },
            "status": Object {
              "placementBindings": Array [
                "binding-comp",
              ],
              "placementPolicies": Array [
                "placement-comp",
              ],
              "status": Object {
                "cluster1": Object {
                  "aggregatePoliciesStatus": Object {
                    "policy-comp": Object {
                      "compliant": "NonCompliant",
                      "valid": true,
                    },
                  },
                  "clustername": "cluster1",
                  "compliant": "NonCompliant",
                },
                "clusterhub": Object {
                  "aggregatePoliciesStatus": Object {
                    "policy-comp": Object {
                      "compliant": "NonCompliant",
                      "valid": true,
                    },
                  },
                  "clustername": "clusterhub",
                  "compliant": "NonCompliant",
                },
              },
            },
          },
          "remediation": "",
        },
        Object {
          "__typename": "Compliance",
          "clusterCompliant": "1/2",
          "clusterNS": Object {
            "beldams": "beldams",
            "cetane": "cetane",
            "djebel": "djebel",
          },
          "metadata": Object {
            "__typename": "Metadata",
            "annotations": Object {
              "policy.mcm.ibm.com/categories": "SystemAndInformationIntegrity",
              "policy.mcm.ibm.com/controls": "MutationAdvisor",
              "policy.mcm.ibm.com/standards": "NIST",
              "seed-generation": "1",
            },
            "name": "policy-ma",
            "namespace": "mcm",
            "resourceVersion": "1308515",
            "selfLink": "/apis/policy.mcm.ibm.com/v1alpha1/namespaces/mcm/policies/policy-ma",
          },
          "name": "policy-ma",
          "namespace": "mcm",
          "placementBindings": Array [
            Object {
              "__typename": "PlacementBinding",
              "metadata": Object {
                "__typename": "Metadata",
                "name": "binding-ma",
                "selfLink": "/apis/mcm.ibm.com/v1alpha1/namespaces/mcm/placementbindings/binding-ma",
              },
            },
          ],
          "placementPolicies": Array [
            Object {
              "__typename": "PlacementPolicy",
              "metadata": Object {
                "__typename": "Metadata",
                "name": "placement-ma",
                "selfLink": "/apis/mcm.ibm.com/v1alpha1/namespaces/mcm/placementpolicies/placement-ma",
              },
            },
          ],
          "policyCompliant": "1/2",
          "raw": Object {
            "apiVersion": "policy.mcm.ibm.com/v1alpha1",
            "kind": "Policy",
            "metadata": Object {
              "annotations": Object {
                "policy.mcm.ibm.com/categories": "SystemAndInformationIntegrity",
                "policy.mcm.ibm.com/controls": "MutationAdvisor",
                "policy.mcm.ibm.com/standards": "NIST",
                "seed-generation": "1",
              },
              "creationTimestamp": "2019-05-17T12:58:05Z",
              "finalizers": Array [
                "propagator.finalizer.mcm.ibm.com",
              ],
              "generation": 22,
              "name": "policy-ma",
              "namespace": "mcm",
              "resourceVersion": "1308515",
              "selfLink": "/apis/policy.mcm.ibm.com/v1alpha1/namespaces/mcm/policies/policy-ma",
              "uid": "692d81a1-78a3-11e9-820c-005056a061f1",
            },
            "spec": Object {
              "namespaces": Object {},
              "policy-templates": Array [
                Object {
                  "objectDefinition": Object {
                    "apiVersion": "policies.ibm.com/v1alpha1",
                    "kind": "MutationPolicy",
                    "metadata": Object {
                      "label": Object {
                        "category": "System-Integrity",
                      },
                      "name": "mutation-policy-example",
                    },
                    "spec": Object {
                      "conditions": Object {
                        "ownership": Array [
                          "ReplicaSet",
                          "Deployment",
                          "DeamonSet",
                          "ReplicationController",
                        ],
                      },
                      "namespaceSelector": Object {
                        "exclude": Array [
                          "kube-system",
                        ],
                        "include": Array [
                          "default",
                          "kube-*",
                        ],
                      },
                      "remediationAction": "enforce",
                    },
                  },
                  "status": Object {
                    "Validity": Object {},
                  },
                },
              ],
              "remediationAction": "enforce",
            },
            "status": Object {
              "placementBindings": Array [
                "binding-ma",
              ],
              "placementPolicies": Array [
                "placement-ma",
              ],
              "status": Object {
                "cluster1": Object {
                  "aggregatePoliciesStatus": Object {
                    "policy-ma": Object {
                      "compliant": "NonCompliant",
                    },
                  },
                  "clustername": "cluster1",
                  "compliant": "NonCompliant",
                },
                "clusterhub": Object {
                  "aggregatePoliciesStatus": Object {
                    "policy-ma": Object {
                      "compliant": "Compliant",
                    },
                  },
                  "clustername": "clusterhub",
                  "compliant": "Compliant",
                },
              },
            },
          },
          "remediation": "enforce",
        },
        Object {
          "__typename": "Compliance",
          "clusterCompliant": "2/2",
          "metadata": Object {
            "__typename": "Metadata",
            "annotations": Object {
              "policy.mcm.ibm.com/categories": "SystemAndCommunicationsProtections,SystemAndInformationIntegrity",
              "policy.mcm.ibm.com/controls": "MutationAdvisor,,VA",
              "policy.mcm.ibm.com/standards": "NIST,HIPAA",
              "seed-generation": "1",
            },
            "name": "policy-pod",
            "namespace": "mcm",
            "resourceVersion": "131792",
            "selfLink": "/apis/policy.mcm.ibm.com/v1alpha1/namespaces/mcm/policies/policy-pod",
          },
          "name": "policy-pod",
          "namespace": "mcm",
          "placementBindings": Array [
            Object {
              "__typename": "PlacementBinding",
              "metadata": Object {
                "__typename": "Metadata",
                "name": "binding-pod",
                "selfLink": "/apis/mcm.ibm.com/v1alpha1/namespaces/mcm/placementbindings/binding-pod",
              },
            },
          ],
          "placementPolicies": Array [
            Object {
              "__typename": "PlacementPolicy",
              "metadata": Object {
                "__typename": "Metadata",
                "name": "placement-pod",
                "selfLink": "/apis/mcm.ibm.com/v1alpha1/namespaces/mcm/placementpolicies/placement-pod",
              },
            },
          ],
          "policyCompliant": "2/2",
          "raw": Object {
            "apiVersion": "policy.mcm.ibm.com/v1alpha1",
            "kind": "Policy",
            "metadata": Object {
              "annotations": Object {
                "policy.mcm.ibm.com/categories": "SystemAndCommunicationsProtections,SystemAndInformationIntegrity",
                "policy.mcm.ibm.com/controls": "MutationAdvisor,,VA",
                "policy.mcm.ibm.com/standards": "NIST,HIPAA",
                "seed-generation": "1",
              },
              "creationTimestamp": "2019-05-17T12:57:48Z",
              "finalizers": Array [
                "propagator.finalizer.mcm.ibm.com",
              ],
              "generation": 7,
              "name": "policy-pod",
              "namespace": "mcm",
              "resourceVersion": "131792",
              "selfLink": "/apis/policy.mcm.ibm.com/v1alpha1/namespaces/mcm/policies/policy-pod",
              "uid": "5f3aea80-78a3-11e9-820c-005056a061f1",
            },
            "spec": Object {
              "complianceType": "musthave",
              "namespaces": Object {
                "exclude": Array [
                  "kube*",
                ],
                "include": Array [
                  "default",
                ],
              },
              "object-templates": Array [
                Object {
                  "complianceType": "musthave",
                  "objectDefinition": Object {
                    "apiVersion": "v1",
                    "kind": "Pod",
                    "metadata": Object {
                      "name": "nginx-pod",
                    },
                    "spec": Object {
                      "containers": Array [
                        Object {
                          "image": "nginx:1.7.9",
                          "name": "nginx",
                          "ports": Array [
                            Object {
                              "containerPort": 80,
                            },
                          ],
                        },
                      ],
                    },
                  },
                  "status": Object {
                    "Validity": Object {},
                  },
                },
              ],
              "remediationAction": "inform",
            },
            "status": Object {
              "placementBindings": Array [
                "binding-pod",
              ],
              "placementPolicies": Array [
                "placement-pod",
              ],
              "status": Object {
                "cluster1": Object {
                  "aggregatePoliciesStatus": Object {
                    "policy-pod": Object {
                      "compliant": "NonCompliant",
                    },
                  },
                  "clustername": "cluster1",
                  "compliant": "NonCompliant",
                },
                "clusterhub": Object {
                  "aggregatePoliciesStatus": Object {
                    "policy-pod": Object {
                      "compliant": "NonCompliant",
                    },
                  },
                  "clustername": "clusterhub",
                  "compliant": "NonCompliant",
                },
              },
            },
          },
          "remediation": "inform",
        },
      ]
    }
    handleDrillDownClick={[MockFunction]}
    showGrcCard={false}
    updateViewState={[MockFunction]}
    viewState={
      Object {
        "viewState": Object {
          "grcCardChoice": "categories",
        },
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <div
          className="header-container card-collapsed"
        >
          <button
            className="collapse"
            onClick={[Function]}
          >
            <span
              className="collapse-hint"
            >
              Want to see your summary cards?
            </span>
            <span
              className="collapse-button"
            >
              Expand summary
            </span>
            <Icon
              className="arrow-down"
              description="expand"
              fillRule="evenodd"
              name="chevron--down"
              role="img"
            />
          </button>
        </div>,
        false,
      ],
      "className": "module-grc-cards",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            false,
            false,
            <button
              className="collapse"
              onClick={[Function]}
            >
              <span
                className="collapse-hint"
              >
                Want to see your summary cards?
              </span>
              <span
                className="collapse-button"
              >
                Expand summary
              </span>
              <Icon
                className="arrow-down"
                description="expand"
                fillRule="evenodd"
                name="chevron--down"
                role="img"
              />
            </button>,
          ],
          "className": "header-container card-collapsed",
        },
        "ref": null,
        "rendered": Array [
          false,
          false,
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <span
                  className="collapse-hint"
                >
                  Want to see your summary cards?
                </span>,
                <span
                  className="collapse-button"
                >
                  Expand summary
                </span>,
                <Icon
                  className="arrow-down"
                  description="expand"
                  fillRule="evenodd"
                  name="chevron--down"
                  role="img"
                />,
              ],
              "className": "collapse",
              "onClick": [Function],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "Want to see your summary cards?",
                  "className": "collapse-hint",
                },
                "ref": null,
                "rendered": "Want to see your summary cards?",
                "type": "span",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "Expand summary",
                  "className": "collapse-button",
                },
                "ref": null,
                "rendered": "Expand summary",
                "type": "span",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "className": "arrow-down",
                  "description": "expand",
                  "fillRule": "evenodd",
                  "name": "chevron--down",
                  "role": "img",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
            ],
            "type": "button",
          },
        ],
        "type": "div",
      },
      false,
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <div
            className="header-container card-collapsed"
          >
            <button
              className="collapse"
              onClick={[Function]}
            >
              <span
                className="collapse-hint"
              >
                Want to see your summary cards?
              </span>
              <span
                className="collapse-button"
              >
                Expand summary
              </span>
              <Icon
                className="arrow-down"
                description="expand"
                fillRule="evenodd"
                name="chevron--down"
                role="img"
              />
            </button>
          </div>,
          false,
        ],
        "className": "module-grc-cards",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              false,
              false,
              <button
                className="collapse"
                onClick={[Function]}
              >
                <span
                  className="collapse-hint"
                >
                  Want to see your summary cards?
                </span>
                <span
                  className="collapse-button"
                >
                  Expand summary
                </span>
                <Icon
                  className="arrow-down"
                  description="expand"
                  fillRule="evenodd"
                  name="chevron--down"
                  role="img"
                />
              </button>,
            ],
            "className": "header-container card-collapsed",
          },
          "ref": null,
          "rendered": Array [
            false,
            false,
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <span
                    className="collapse-hint"
                  >
                    Want to see your summary cards?
                  </span>,
                  <span
                    className="collapse-button"
                  >
                    Expand summary
                  </span>,
                  <Icon
                    className="arrow-down"
                    description="expand"
                    fillRule="evenodd"
                    name="chevron--down"
                    role="img"
                  />,
                ],
                "className": "collapse",
                "onClick": [Function],
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "Want to see your summary cards?",
                    "className": "collapse-hint",
                  },
                  "ref": null,
                  "rendered": "Want to see your summary cards?",
                  "type": "span",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "Expand summary",
                    "className": "collapse-button",
                  },
                  "ref": null,
                  "rendered": "Expand summary",
                  "type": "span",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "className": "arrow-down",
                    "description": "expand",
                    "fillRule": "evenodd",
                    "name": "chevron--down",
                    "role": "img",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
              ],
              "type": "button",
            },
          ],
          "type": "div",
        },
        false,
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": true,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    Symbol(enzyme.__providerValues__): undefined,
  },
  Symbol(enzyme.__providerValues__): Map {},
  Symbol(enzyme.__childContext__): null,
}
`;

exports[`GrcCardsModule policies page categories view renders expand as expected 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <GrcCardsModule
    activeFilters={
      Object {
        "activeFilters": Object {},
      }
    }
    displayType="all"
    grcItems={
      Array [
        Object {
          "__typename": "Compliance",
          "clusterCompliant": "2/2",
          "clusterNS": Object {
            "beldams": "beldams",
            "cetane": "cetane",
            "djebel": "djebel",
          },
          "metadata": Object {
            "__typename": "Metadata",
            "annotations": Object {
              "seed-generation": "1",
            },
            "name": "compliance-all",
            "namespace": "mcm",
            "resourceVersion": "1071070",
            "selfLink": "/apis/compliance.mcm.ibm.com/v1alpha1/namespaces/mcm/compliances/compliance-all",
          },
          "name": "compliance-all",
          "namespace": "mcm",
          "placementBindings": Array [
            Object {
              "__typename": "PlacementBinding",
              "metadata": Object {
                "__typename": "Metadata",
                "name": "binding-comp",
                "selfLink": "/apis/mcm.ibm.com/v1alpha1/namespaces/mcm/placementbindings/binding-comp",
              },
            },
          ],
          "placementPolicies": Array [
            Object {
              "__typename": "PlacementPolicy",
              "metadata": Object {
                "__typename": "Metadata",
                "name": "placement-comp",
                "selfLink": "/apis/mcm.ibm.com/v1alpha1/namespaces/mcm/placementpolicies/placement-comp",
              },
            },
          ],
          "policyCompliant": "2/2",
          "raw": Object {
            "apiVersion": "compliance.mcm.ibm.com/v1alpha1",
            "kind": "Compliance",
            "metadata": Object {
              "annotations": Object {
                "seed-generation": "1",
              },
              "creationTimestamp": "2019-05-21T14:02:49Z",
              "finalizers": Array [
                "propagator.finalizer.mcm.ibm.com",
              ],
              "generation": 6,
              "name": "compliance-all",
              "namespace": "mcm",
              "resourceVersion": "1071070",
              "selfLink": "/apis/compliance.mcm.ibm.com/v1alpha1/namespaces/mcm/compliances/compliance-all",
              "uid": "1e04ec63-7bd1-11e9-820c-005056a061f1",
            },
            "spec": Object {
              "runtime-rules": Array [
                Object {
                  "apiVersion": "policy.mcm.ibm.com/v1alpha1",
                  "kind": "Policy",
                  "metadata": Object {
                    "creationTimestamp": null,
                    "labels": Object {
                      "cis-docker": "true",
                    },
                    "name": "policy-comp",
                  },
                  "spec": Object {
                    "complianceType": "musthave",
                    "namespaces": Object {
                      "exclude": Array [
                        "kube*",
                      ],
                      "include": Array [
                        "default",
                      ],
                    },
                    "object-templates": Array [
                      Object {
                        "complianceType": "musthave",
                        "objectDefinition": Object {
                          "apiVersion": "rbac.authorization.k8s.io/v1",
                          "kind": "RoleBinding",
                          "metadata": Object {
                            "name": "operate-pods-rolebinding",
                            "namespace": "default",
                          },
                          "roleRef": Object {
                            "apiGroup": "rbac.authorization.k8s.io",
                            "kind": "Role",
                            "name": "operator",
                          },
                          "subjects": Array [
                            Object {
                              "apiGroup": "rbac.authorization.k8s.io",
                              "kind": "User",
                              "name": "admin",
                            },
                          ],
                        },
                        "status": Object {
                          "Validity": Object {},
                        },
                      },
                      Object {
                        "complianceType": "musthave",
                        "objectDefinition": Object {
                          "apiVersion": "policy/v1beta1",
                          "kind": "PodSecurityPolicy",
                          "metadata": Object {
                            "annotations": Object {
                              "seccomp.security.alpha.kubernetes.io/allowedProfileNames": "*",
                            },
                            "name": "restricted-mcm",
                          },
                          "spec": Object {
                            "allowPrivilegeEscalation": false,
                            "allowedCapabilities": Array [
                              "*",
                            ],
                            "fsGroup": Object {
                              "rule": "RunAsAny",
                            },
                            "hostIPC": false,
                            "hostNetwork": true,
                            "hostPID": false,
                            "hostPorts": Array [
                              Object {
                                "max": 65535,
                                "min": 1000,
                              },
                            ],
                            "privileged": false,
                            "runAsUser": Object {
                              "rule": "RunAsAny",
                            },
                            "seLinux": Object {
                              "rule": "RunAsAny",
                            },
                            "supplementalGroups": Object {
                              "rule": "RunAsAny",
                            },
                            "volumes": Array [
                              "*",
                            ],
                          },
                        },
                        "status": Object {
                          "Validity": Object {},
                        },
                      },
                      Object {
                        "complianceType": "musthave",
                        "objectDefinition": Object {
                          "apiVersion": "networking.k8s.io/v1",
                          "kind": "NetworkPolicy",
                          "metadata": Object {
                            "name": "deny-from-other-namespaces",
                            "namespace": "default",
                          },
                          "spec": Object {
                            "ingress": Array [
                              Object {
                                "from": Array [
                                  Object {
                                    "podSelector": Object {},
                                  },
                                ],
                              },
                            ],
                            "podSelector": Object {
                              "matchLabels": null,
                            },
                          },
                        },
                        "status": Object {
                          "Validity": Object {},
                        },
                      },
                      Object {
                        "complianceType": "musthave",
                        "objectDefinition": Object {
                          "apiVersion": "v1",
                          "kind": "LimitRange",
                          "metadata": Object {
                            "name": "mem-limit-range",
                          },
                          "spec": Object {
                            "limits": Array [
                              Object {
                                "default": Object {
                                  "memory": "512Mi",
                                },
                                "defaultRequest": Object {
                                  "memory": "256Mi",
                                },
                                "type": "Container",
                              },
                            ],
                          },
                        },
                        "status": Object {
                          "Validity": Object {},
                        },
                      },
                    ],
                    "remediationAction": "inform",
                    "role-templates": Array [
                      Object {
                        "apiVersion": "roletemplate.mcm.ibm.com/v1alpha1",
                        "complianceType": "musthave",
                        "metadata": Object {
                          "creationTimestamp": null,
                          "name": "operator-role",
                        },
                        "rules": Array [
                          Object {
                            "complianceType": "mustnothave",
                            "policyRule": Object {
                              "apiGroups": Array [
                                "core",
                              ],
                              "resources": Array [
                                "secrets",
                              ],
                              "verbs": Array [
                                "get",
                                "list",
                                "watch",
                                "delete",
                                "create",
                                "update",
                                "patch",
                              ],
                            },
                          },
                          Object {
                            "complianceType": "musthave",
                            "policyRule": Object {
                              "apiGroups": Array [
                                "core",
                              ],
                              "resources": Array [
                                "pods",
                              ],
                              "verbs": Array [
                                "get",
                                "list",
                                "watch",
                              ],
                            },
                          },
                        ],
                        "selector": Object {
                          "matchLabels": Object {
                            "dev": "true",
                          },
                        },
                        "status": Object {
                          "Validity": Object {},
                        },
                      },
                    ],
                  },
                  "status": Object {},
                },
              ],
            },
            "status": Object {
              "placementBindings": Array [
                "binding-comp",
              ],
              "placementPolicies": Array [
                "placement-comp",
              ],
              "status": Object {
                "cluster1": Object {
                  "aggregatePoliciesStatus": Object {
                    "policy-comp": Object {
                      "compliant": "NonCompliant",
                      "valid": true,
                    },
                  },
                  "clustername": "cluster1",
                  "compliant": "NonCompliant",
                },
                "clusterhub": Object {
                  "aggregatePoliciesStatus": Object {
                    "policy-comp": Object {
                      "compliant": "NonCompliant",
                      "valid": true,
                    },
                  },
                  "clustername": "clusterhub",
                  "compliant": "NonCompliant",
                },
              },
            },
          },
          "remediation": "",
        },
        Object {
          "__typename": "Compliance",
          "clusterCompliant": "1/2",
          "clusterNS": Object {
            "beldams": "beldams",
            "cetane": "cetane",
            "djebel": "djebel",
          },
          "metadata": Object {
            "__typename": "Metadata",
            "annotations": Object {
              "policy.mcm.ibm.com/categories": "SystemAndInformationIntegrity",
              "policy.mcm.ibm.com/controls": "MutationAdvisor",
              "policy.mcm.ibm.com/standards": "NIST",
              "seed-generation": "1",
            },
            "name": "policy-ma",
            "namespace": "mcm",
            "resourceVersion": "1308515",
            "selfLink": "/apis/policy.mcm.ibm.com/v1alpha1/namespaces/mcm/policies/policy-ma",
          },
          "name": "policy-ma",
          "namespace": "mcm",
          "placementBindings": Array [
            Object {
              "__typename": "PlacementBinding",
              "metadata": Object {
                "__typename": "Metadata",
                "name": "binding-ma",
                "selfLink": "/apis/mcm.ibm.com/v1alpha1/namespaces/mcm/placementbindings/binding-ma",
              },
            },
          ],
          "placementPolicies": Array [
            Object {
              "__typename": "PlacementPolicy",
              "metadata": Object {
                "__typename": "Metadata",
                "name": "placement-ma",
                "selfLink": "/apis/mcm.ibm.com/v1alpha1/namespaces/mcm/placementpolicies/placement-ma",
              },
            },
          ],
          "policyCompliant": "1/2",
          "raw": Object {
            "apiVersion": "policy.mcm.ibm.com/v1alpha1",
            "kind": "Policy",
            "metadata": Object {
              "annotations": Object {
                "policy.mcm.ibm.com/categories": "SystemAndInformationIntegrity",
                "policy.mcm.ibm.com/controls": "MutationAdvisor",
                "policy.mcm.ibm.com/standards": "NIST",
                "seed-generation": "1",
              },
              "creationTimestamp": "2019-05-17T12:58:05Z",
              "finalizers": Array [
                "propagator.finalizer.mcm.ibm.com",
              ],
              "generation": 22,
              "name": "policy-ma",
              "namespace": "mcm",
              "resourceVersion": "1308515",
              "selfLink": "/apis/policy.mcm.ibm.com/v1alpha1/namespaces/mcm/policies/policy-ma",
              "uid": "692d81a1-78a3-11e9-820c-005056a061f1",
            },
            "spec": Object {
              "namespaces": Object {},
              "policy-templates": Array [
                Object {
                  "objectDefinition": Object {
                    "apiVersion": "policies.ibm.com/v1alpha1",
                    "kind": "MutationPolicy",
                    "metadata": Object {
                      "label": Object {
                        "category": "System-Integrity",
                      },
                      "name": "mutation-policy-example",
                    },
                    "spec": Object {
                      "conditions": Object {
                        "ownership": Array [
                          "ReplicaSet",
                          "Deployment",
                          "DeamonSet",
                          "ReplicationController",
                        ],
                      },
                      "namespaceSelector": Object {
                        "exclude": Array [
                          "kube-system",
                        ],
                        "include": Array [
                          "default",
                          "kube-*",
                        ],
                      },
                      "remediationAction": "enforce",
                    },
                  },
                  "status": Object {
                    "Validity": Object {},
                  },
                },
              ],
              "remediationAction": "enforce",
            },
            "status": Object {
              "placementBindings": Array [
                "binding-ma",
              ],
              "placementPolicies": Array [
                "placement-ma",
              ],
              "status": Object {
                "cluster1": Object {
                  "aggregatePoliciesStatus": Object {
                    "policy-ma": Object {
                      "compliant": "NonCompliant",
                    },
                  },
                  "clustername": "cluster1",
                  "compliant": "NonCompliant",
                },
                "clusterhub": Object {
                  "aggregatePoliciesStatus": Object {
                    "policy-ma": Object {
                      "compliant": "Compliant",
                    },
                  },
                  "clustername": "clusterhub",
                  "compliant": "Compliant",
                },
              },
            },
          },
          "remediation": "enforce",
        },
        Object {
          "__typename": "Compliance",
          "clusterCompliant": "2/2",
          "metadata": Object {
            "__typename": "Metadata",
            "annotations": Object {
              "policy.mcm.ibm.com/categories": "SystemAndCommunicationsProtections,SystemAndInformationIntegrity",
              "policy.mcm.ibm.com/controls": "MutationAdvisor,,VA",
              "policy.mcm.ibm.com/standards": "NIST,HIPAA",
              "seed-generation": "1",
            },
            "name": "policy-pod",
            "namespace": "mcm",
            "resourceVersion": "131792",
            "selfLink": "/apis/policy.mcm.ibm.com/v1alpha1/namespaces/mcm/policies/policy-pod",
          },
          "name": "policy-pod",
          "namespace": "mcm",
          "placementBindings": Array [
            Object {
              "__typename": "PlacementBinding",
              "metadata": Object {
                "__typename": "Metadata",
                "name": "binding-pod",
                "selfLink": "/apis/mcm.ibm.com/v1alpha1/namespaces/mcm/placementbindings/binding-pod",
              },
            },
          ],
          "placementPolicies": Array [
            Object {
              "__typename": "PlacementPolicy",
              "metadata": Object {
                "__typename": "Metadata",
                "name": "placement-pod",
                "selfLink": "/apis/mcm.ibm.com/v1alpha1/namespaces/mcm/placementpolicies/placement-pod",
              },
            },
          ],
          "policyCompliant": "2/2",
          "raw": Object {
            "apiVersion": "policy.mcm.ibm.com/v1alpha1",
            "kind": "Policy",
            "metadata": Object {
              "annotations": Object {
                "policy.mcm.ibm.com/categories": "SystemAndCommunicationsProtections,SystemAndInformationIntegrity",
                "policy.mcm.ibm.com/controls": "MutationAdvisor,,VA",
                "policy.mcm.ibm.com/standards": "NIST,HIPAA",
                "seed-generation": "1",
              },
              "creationTimestamp": "2019-05-17T12:57:48Z",
              "finalizers": Array [
                "propagator.finalizer.mcm.ibm.com",
              ],
              "generation": 7,
              "name": "policy-pod",
              "namespace": "mcm",
              "resourceVersion": "131792",
              "selfLink": "/apis/policy.mcm.ibm.com/v1alpha1/namespaces/mcm/policies/policy-pod",
              "uid": "5f3aea80-78a3-11e9-820c-005056a061f1",
            },
            "spec": Object {
              "complianceType": "musthave",
              "namespaces": Object {
                "exclude": Array [
                  "kube*",
                ],
                "include": Array [
                  "default",
                ],
              },
              "object-templates": Array [
                Object {
                  "complianceType": "musthave",
                  "objectDefinition": Object {
                    "apiVersion": "v1",
                    "kind": "Pod",
                    "metadata": Object {
                      "name": "nginx-pod",
                    },
                    "spec": Object {
                      "containers": Array [
                        Object {
                          "image": "nginx:1.7.9",
                          "name": "nginx",
                          "ports": Array [
                            Object {
                              "containerPort": 80,
                            },
                          ],
                        },
                      ],
                    },
                  },
                  "status": Object {
                    "Validity": Object {},
                  },
                },
              ],
              "remediationAction": "inform",
            },
            "status": Object {
              "placementBindings": Array [
                "binding-pod",
              ],
              "placementPolicies": Array [
                "placement-pod",
              ],
              "status": Object {
                "cluster1": Object {
                  "aggregatePoliciesStatus": Object {
                    "policy-pod": Object {
                      "compliant": "NonCompliant",
                    },
                  },
                  "clustername": "cluster1",
                  "compliant": "NonCompliant",
                },
                "clusterhub": Object {
                  "aggregatePoliciesStatus": Object {
                    "policy-pod": Object {
                      "compliant": "NonCompliant",
                    },
                  },
                  "clustername": "clusterhub",
                  "compliant": "NonCompliant",
                },
              },
            },
          },
          "remediation": "inform",
        },
      ]
    }
    handleDrillDownClick={[MockFunction]}
    showGrcCard={true}
    updateViewState={[MockFunction]}
    viewState={
      Object {
        "viewState": Object {
          "grcCardChoice": "categories",
        },
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <div
          className="header-container"
        >
          <div
            className="header-title"
          >
            Summary
          </div>
          <div>
            <DropdownV2
              ariaLabel="Summary"
              className="selection"
              disabled={false}
              helperText=""
              initialSelectedItem="Standards"
              inline={true}
              itemToElement={null}
              itemToString={[Function]}
              items={
                Array [
                  Object {
                    "label": "Categories",
                    "value": "categories",
                  },
                  Object {
                    "label": "Standards",
                    "value": "standards",
                  },
                ]
              }
              label="Summary"
              light={false}
              onChange={[Function]}
              titleText=""
              type="default"
            />
          </div>
          <button
            className="collapse"
            onClick={[Function]}
          >
            <span
              className="collapse-hint"
            >
              Want to see less information?
            </span>
            <span
              className="collapse-button"
            >
              Collapse summary
            </span>
            <Icon
              className="arrow-up"
              description="collapse"
              fillRule="evenodd"
              name="chevron--up"
              role="img"
            />
          </button>
        </div>,
        <div
          className="card-container-container"
        >
          <PolicyCard
            data={
              Object {
                "choice": "standards",
                "counts": Object {
                  "cluster": Object {
                    "total": 2,
                    "violations": 2,
                  },
                  "policy": Object {
                    "total": 2,
                    "violations": 2,
                  },
                },
                "name": "NIST",
                "rawName": "NIST",
                "violations": 4,
              }
            }
            handleClick={[MockFunction]}
            locale={undefined}
          />
          <PolicyCard
            data={
              Object {
                "choice": "standards",
                "counts": Object {
                  "cluster": Object {
                    "total": 2,
                    "violations": 2,
                  },
                  "policy": Object {
                    "total": 1,
                    "violations": 1,
                  },
                },
                "name": "HIPAA",
                "rawName": "HIPAA",
                "violations": 3,
              }
            }
            handleClick={[MockFunction]}
            locale={undefined}
          />
        </div>,
      ],
      "className": "module-grc-cards",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <div
              className="header-title"
            >
              Summary
            </div>,
            <div>
              <DropdownV2
                ariaLabel="Summary"
                className="selection"
                disabled={false}
                helperText=""
                initialSelectedItem="Standards"
                inline={true}
                itemToElement={null}
                itemToString={[Function]}
                items={
                  Array [
                    Object {
                      "label": "Categories",
                      "value": "categories",
                    },
                    Object {
                      "label": "Standards",
                      "value": "standards",
                    },
                  ]
                }
                label="Summary"
                light={false}
                onChange={[Function]}
                titleText=""
                type="default"
              />
            </div>,
            <button
              className="collapse"
              onClick={[Function]}
            >
              <span
                className="collapse-hint"
              >
                Want to see less information?
              </span>
              <span
                className="collapse-button"
              >
                Collapse summary
              </span>
              <Icon
                className="arrow-up"
                description="collapse"
                fillRule="evenodd"
                name="chevron--up"
                role="img"
              />
            </button>,
          ],
          "className": "header-container",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Summary",
              "className": "header-title",
            },
            "ref": null,
            "rendered": "Summary",
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <DropdownV2
                ariaLabel="Summary"
                className="selection"
                disabled={false}
                helperText=""
                initialSelectedItem="Standards"
                inline={true}
                itemToElement={null}
                itemToString={[Function]}
                items={
                  Array [
                    Object {
                      "label": "Categories",
                      "value": "categories",
                    },
                    Object {
                      "label": "Standards",
                      "value": "standards",
                    },
                  ]
                }
                label="Summary"
                light={false}
                onChange={[Function]}
                titleText=""
                type="default"
              />,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "ariaLabel": "Summary",
                "className": "selection",
                "disabled": false,
                "helperText": "",
                "initialSelectedItem": "Standards",
                "inline": true,
                "itemToElement": null,
                "itemToString": [Function],
                "items": Array [
                  Object {
                    "label": "Categories",
                    "value": "categories",
                  },
                  Object {
                    "label": "Standards",
                    "value": "standards",
                  },
                ],
                "label": "Summary",
                "light": false,
                "onChange": [Function],
                "titleText": "",
                "type": "default",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <span
                  className="collapse-hint"
                >
                  Want to see less information?
                </span>,
                <span
                  className="collapse-button"
                >
                  Collapse summary
                </span>,
                <Icon
                  className="arrow-up"
                  description="collapse"
                  fillRule="evenodd"
                  name="chevron--up"
                  role="img"
                />,
              ],
              "className": "collapse",
              "onClick": [Function],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "Want to see less information?",
                  "className": "collapse-hint",
                },
                "ref": null,
                "rendered": "Want to see less information?",
                "type": "span",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "Collapse summary",
                  "className": "collapse-button",
                },
                "ref": null,
                "rendered": "Collapse summary",
                "type": "span",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "className": "arrow-up",
                  "description": "collapse",
                  "fillRule": "evenodd",
                  "name": "chevron--up",
                  "role": "img",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
            ],
            "type": "button",
          },
        ],
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <PolicyCard
              data={
                Object {
                  "choice": "standards",
                  "counts": Object {
                    "cluster": Object {
                      "total": 2,
                      "violations": 2,
                    },
                    "policy": Object {
                      "total": 2,
                      "violations": 2,
                    },
                  },
                  "name": "NIST",
                  "rawName": "NIST",
                  "violations": 4,
                }
              }
              handleClick={[MockFunction]}
              locale={undefined}
            />,
            <PolicyCard
              data={
                Object {
                  "choice": "standards",
                  "counts": Object {
                    "cluster": Object {
                      "total": 2,
                      "violations": 2,
                    },
                    "policy": Object {
                      "total": 1,
                      "violations": 1,
                    },
                  },
                  "name": "HIPAA",
                  "rawName": "HIPAA",
                  "violations": 3,
                }
              }
              handleClick={[MockFunction]}
              locale={undefined}
            />,
          ],
          "className": "card-container-container",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": "NIST",
            "nodeType": "function",
            "props": Object {
              "data": Object {
                "choice": "standards",
                "counts": Object {
                  "cluster": Object {
                    "total": 2,
                    "violations": 2,
                  },
                  "policy": Object {
                    "total": 2,
                    "violations": 2,
                  },
                },
                "name": "NIST",
                "rawName": "NIST",
                "violations": 4,
              },
              "handleClick": [MockFunction],
              "locale": undefined,
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": "HIPAA",
            "nodeType": "function",
            "props": Object {
              "data": Object {
                "choice": "standards",
                "counts": Object {
                  "cluster": Object {
                    "total": 2,
                    "violations": 2,
                  },
                  "policy": Object {
                    "total": 1,
                    "violations": 1,
                  },
                },
                "name": "HIPAA",
                "rawName": "HIPAA",
                "violations": 3,
              },
              "handleClick": [MockFunction],
              "locale": undefined,
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": "div",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <div
            className="header-container"
          >
            <div
              className="header-title"
            >
              Summary
            </div>
            <div>
              <DropdownV2
                ariaLabel="Summary"
                className="selection"
                disabled={false}
                helperText=""
                initialSelectedItem="Standards"
                inline={true}
                itemToElement={null}
                itemToString={[Function]}
                items={
                  Array [
                    Object {
                      "label": "Categories",
                      "value": "categories",
                    },
                    Object {
                      "label": "Standards",
                      "value": "standards",
                    },
                  ]
                }
                label="Summary"
                light={false}
                onChange={[Function]}
                titleText=""
                type="default"
              />
            </div>
            <button
              className="collapse"
              onClick={[Function]}
            >
              <span
                className="collapse-hint"
              >
                Want to see less information?
              </span>
              <span
                className="collapse-button"
              >
                Collapse summary
              </span>
              <Icon
                className="arrow-up"
                description="collapse"
                fillRule="evenodd"
                name="chevron--up"
                role="img"
              />
            </button>
          </div>,
          <div
            className="card-container-container"
          >
            <PolicyCard
              data={
                Object {
                  "choice": "standards",
                  "counts": Object {
                    "cluster": Object {
                      "total": 2,
                      "violations": 2,
                    },
                    "policy": Object {
                      "total": 2,
                      "violations": 2,
                    },
                  },
                  "name": "NIST",
                  "rawName": "NIST",
                  "violations": 4,
                }
              }
              handleClick={[MockFunction]}
              locale={undefined}
            />
            <PolicyCard
              data={
                Object {
                  "choice": "standards",
                  "counts": Object {
                    "cluster": Object {
                      "total": 2,
                      "violations": 2,
                    },
                    "policy": Object {
                      "total": 1,
                      "violations": 1,
                    },
                  },
                  "name": "HIPAA",
                  "rawName": "HIPAA",
                  "violations": 3,
                }
              }
              handleClick={[MockFunction]}
              locale={undefined}
            />
          </div>,
        ],
        "className": "module-grc-cards",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <div
                className="header-title"
              >
                Summary
              </div>,
              <div>
                <DropdownV2
                  ariaLabel="Summary"
                  className="selection"
                  disabled={false}
                  helperText=""
                  initialSelectedItem="Standards"
                  inline={true}
                  itemToElement={null}
                  itemToString={[Function]}
                  items={
                    Array [
                      Object {
                        "label": "Categories",
                        "value": "categories",
                      },
                      Object {
                        "label": "Standards",
                        "value": "standards",
                      },
                    ]
                  }
                  label="Summary"
                  light={false}
                  onChange={[Function]}
                  titleText=""
                  type="default"
                />
              </div>,
              <button
                className="collapse"
                onClick={[Function]}
              >
                <span
                  className="collapse-hint"
                >
                  Want to see less information?
                </span>
                <span
                  className="collapse-button"
                >
                  Collapse summary
                </span>
                <Icon
                  className="arrow-up"
                  description="collapse"
                  fillRule="evenodd"
                  name="chevron--up"
                  role="img"
                />
              </button>,
            ],
            "className": "header-container",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Summary",
                "className": "header-title",
              },
              "ref": null,
              "rendered": "Summary",
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <DropdownV2
                  ariaLabel="Summary"
                  className="selection"
                  disabled={false}
                  helperText=""
                  initialSelectedItem="Standards"
                  inline={true}
                  itemToElement={null}
                  itemToString={[Function]}
                  items={
                    Array [
                      Object {
                        "label": "Categories",
                        "value": "categories",
                      },
                      Object {
                        "label": "Standards",
                        "value": "standards",
                      },
                    ]
                  }
                  label="Summary"
                  light={false}
                  onChange={[Function]}
                  titleText=""
                  type="default"
                />,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "ariaLabel": "Summary",
                  "className": "selection",
                  "disabled": false,
                  "helperText": "",
                  "initialSelectedItem": "Standards",
                  "inline": true,
                  "itemToElement": null,
                  "itemToString": [Function],
                  "items": Array [
                    Object {
                      "label": "Categories",
                      "value": "categories",
                    },
                    Object {
                      "label": "Standards",
                      "value": "standards",
                    },
                  ],
                  "label": "Summary",
                  "light": false,
                  "onChange": [Function],
                  "titleText": "",
                  "type": "default",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <span
                    className="collapse-hint"
                  >
                    Want to see less information?
                  </span>,
                  <span
                    className="collapse-button"
                  >
                    Collapse summary
                  </span>,
                  <Icon
                    className="arrow-up"
                    description="collapse"
                    fillRule="evenodd"
                    name="chevron--up"
                    role="img"
                  />,
                ],
                "className": "collapse",
                "onClick": [Function],
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "Want to see less information?",
                    "className": "collapse-hint",
                  },
                  "ref": null,
                  "rendered": "Want to see less information?",
                  "type": "span",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "Collapse summary",
                    "className": "collapse-button",
                  },
                  "ref": null,
                  "rendered": "Collapse summary",
                  "type": "span",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "className": "arrow-up",
                    "description": "collapse",
                    "fillRule": "evenodd",
                    "name": "chevron--up",
                    "role": "img",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
              ],
              "type": "button",
            },
          ],
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <PolicyCard
                data={
                  Object {
                    "choice": "standards",
                    "counts": Object {
                      "cluster": Object {
                        "total": 2,
                        "violations": 2,
                      },
                      "policy": Object {
                        "total": 2,
                        "violations": 2,
                      },
                    },
                    "name": "NIST",
                    "rawName": "NIST",
                    "violations": 4,
                  }
                }
                handleClick={[MockFunction]}
                locale={undefined}
              />,
              <PolicyCard
                data={
                  Object {
                    "choice": "standards",
                    "counts": Object {
                      "cluster": Object {
                        "total": 2,
                        "violations": 2,
                      },
                      "policy": Object {
                        "total": 1,
                        "violations": 1,
                      },
                    },
                    "name": "HIPAA",
                    "rawName": "HIPAA",
                    "violations": 3,
                  }
                }
                handleClick={[MockFunction]}
                locale={undefined}
              />,
            ],
            "className": "card-container-container",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": "NIST",
              "nodeType": "function",
              "props": Object {
                "data": Object {
                  "choice": "standards",
                  "counts": Object {
                    "cluster": Object {
                      "total": 2,
                      "violations": 2,
                    },
                    "policy": Object {
                      "total": 2,
                      "violations": 2,
                    },
                  },
                  "name": "NIST",
                  "rawName": "NIST",
                  "violations": 4,
                },
                "handleClick": [MockFunction],
                "locale": undefined,
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": "HIPAA",
              "nodeType": "function",
              "props": Object {
                "data": Object {
                  "choice": "standards",
                  "counts": Object {
                    "cluster": Object {
                      "total": 2,
                      "violations": 2,
                    },
                    "policy": Object {
                      "total": 1,
                      "violations": 1,
                    },
                  },
                  "name": "HIPAA",
                  "rawName": "HIPAA",
                  "violations": 3,
                },
                "handleClick": [MockFunction],
                "locale": undefined,
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": "div",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": true,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    Symbol(enzyme.__providerValues__): undefined,
  },
  Symbol(enzyme.__providerValues__): Map {},
  Symbol(enzyme.__childContext__): null,
}
`;

exports[`GrcCardsModule policies page standards view renders collapse as expected 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <GrcCardsModule
    activeFilters={
      Object {
        "activeFilters": Object {},
      }
    }
    displayType="other"
    grcItems={
      Array [
        Object {
          "__typename": "Compliance",
          "clusterCompliant": "2/2",
          "clusterNS": Object {
            "beldams": "beldams",
            "cetane": "cetane",
            "djebel": "djebel",
          },
          "metadata": Object {
            "__typename": "Metadata",
            "annotations": Object {
              "policy.mcm.ibm.com/categories": "SystemAndCommunicationsProtections,SystemAndInformationIntegrity",
              "policy.mcm.ibm.com/controls": "MutationAdvisor,,VA",
              "policy.mcm.ibm.com/standards": "NIST CSF",
              "seed-generation": "2",
            },
            "name": "1558374675051-policy-pod",
            "namespace": "mcm",
            "resourceVersion": "6281988",
            "selfLink": "/apis/policy.mcm.ibm.com/v1alpha1/namespaces/mcm/policies/1558374675051-policy-pod",
          },
          "name": "1558374675051-policy-pod",
          "namespace": "mcm",
          "placementBindings": Array [
            Object {
              "__typename": "PlacementBinding",
              "metadata": Object {
                "__typename": "Metadata",
                "name": "1558374675051-placement-binding-test",
                "selfLink": "/apis/mcm.ibm.com/v1alpha1/namespaces/mcm/placementbindings/1558374675051-placement-binding-test",
              },
            },
          ],
          "placementPolicies": Array [
            Object {
              "__typename": "PlacementPolicy",
              "metadata": Object {
                "__typename": "Metadata",
                "name": "1558374675051-placement-policy-test",
                "selfLink": "/apis/mcm.ibm.com/v1alpha1/namespaces/mcm/placementpolicies/1558374675051-placement-policy-test",
              },
            },
          ],
          "policyCompliant": "2/2",
          "raw": Object {
            "apiVersion": "policy.mcm.ibm.com/v1alpha1",
            "kind": "Policy",
            "metadata": Object {
              "annotations": Object {
                "policy.mcm.ibm.com/categories": "SystemAndCommunicationsProtections,SystemAndInformationIntegrity",
                "policy.mcm.ibm.com/controls": "MutationAdvisor,,VA",
                "policy.mcm.ibm.com/standards": "NIST CSF",
                "seed-generation": "2",
              },
              "creationTimestamp": "2019-05-20T17:51:38Z",
              "finalizers": Array [
                "propagator.finalizer.mcm.ibm.com",
              ],
              "generation": 6,
              "name": "1558374675051-policy-pod",
              "namespace": "mcm",
              "resourceVersion": "6281988",
              "selfLink": "/apis/policy.mcm.ibm.com/v1alpha1/namespaces/mcm/policies/1558374675051-policy-pod",
              "uid": "eacbfd03-7b27-11e9-a751-005056a0b88e",
            },
            "spec": Object {
              "complianceType": "musthave",
              "namespaces": Object {
                "exclude": Array [
                  "kube*",
                ],
                "include": Array [
                  "default",
                ],
              },
              "object-templates": Array [
                Object {
                  "complianceType": "musthave",
                  "objectDefinition": Object {
                    "apiVersion": "v1",
                    "kind": "Pod",
                    "metadata": Object {
                      "name": "nginx1",
                    },
                    "spec": Object {
                      "containers": Array [
                        Object {
                          "image": "nginx:1.7.9",
                          "name": "nginx",
                          "ports": Array [
                            Object {
                              "containerPort": 80,
                            },
                          ],
                        },
                      ],
                    },
                  },
                  "status": Object {
                    "Validity": Object {},
                  },
                },
              ],
              "remediationAction": "inform",
            },
            "status": Object {
              "placementBindings": Array [
                "1558374675051-placement-binding-test",
              ],
              "placementPolicies": Array [
                "1558374675051-placement-policy-test",
              ],
              "status": Object {
                "cluster1": Object {
                  "aggregatePoliciesStatus": Object {
                    "1558374675051-policy-pod": Object {
                      "compliant": "NonCompliant",
                    },
                  },
                  "clustername": "cluster1",
                  "compliant": "NonCompliant",
                },
                "clusterhub": Object {
                  "aggregatePoliciesStatus": Object {
                    "1558374675051-policy-pod": Object {
                      "compliant": "NonCompliant",
                    },
                  },
                  "clustername": "clusterhub",
                  "compliant": "NonCompliant",
                },
              },
            },
          },
          "remediation": "inform",
        },
        Object {
          "__typename": "Compliance",
          "clusterCompliant": "2/2",
          "metadata": Object {
            "__typename": "Metadata",
            "annotations": Object {
              "policy.mcm.ibm.com/categories": "SystemAndCommunicationsProtections,SystemAndInformationIntegrity",
              "policy.mcm.ibm.com/controls": "MutationAdvisor,,VA",
              "policy.mcm.ibm.com/standards": "NIST CSF, NIST",
              "seed-generation": "2",
            },
            "name": "1558382034240-policy-pod",
            "namespace": "mcm",
            "resourceVersion": "6975805",
            "selfLink": "/apis/policy.mcm.ibm.com/v1alpha1/namespaces/mcm/policies/1558382034240-policy-pod",
          },
          "name": "1558382034240-policy-pod",
          "namespace": "mcm",
          "placementBindings": Array [
            Object {
              "__typename": "PlacementBinding",
              "metadata": Object {
                "__typename": "Metadata",
                "name": "1558382034240-placement-binding-test",
                "selfLink": "/apis/mcm.ibm.com/v1alpha1/namespaces/mcm/placementbindings/1558382034240-placement-binding-test",
              },
            },
          ],
          "placementPolicies": Array [
            Object {
              "__typename": "PlacementPolicy",
              "metadata": Object {
                "__typename": "Metadata",
                "name": "1558382034240-placement-policy-test",
                "selfLink": "/apis/mcm.ibm.com/v1alpha1/namespaces/mcm/placementpolicies/1558382034240-placement-policy-test",
              },
            },
          ],
          "policyCompliant": "2/2",
          "raw": Object {
            "apiVersion": "policy.mcm.ibm.com/v1alpha1",
            "kind": "Policy",
            "metadata": Object {
              "annotations": Object {
                "policy.mcm.ibm.com/categories": "SystemAndCommunicationsProtections,SystemAndInformationIntegrity",
                "policy.mcm.ibm.com/controls": "MutationAdvisor,,VA",
                "policy.mcm.ibm.com/standards": "NIST CSF, NIST",
                "seed-generation": "2",
              },
              "creationTimestamp": "2019-05-20T19:54:18Z",
              "finalizers": Array [
                "propagator.finalizer.mcm.ibm.com",
              ],
              "generation": 11,
              "name": "1558382034240-policy-pod",
              "namespace": "mcm",
              "resourceVersion": "6975805",
              "selfLink": "/apis/policy.mcm.ibm.com/v1alpha1/namespaces/mcm/policies/1558382034240-policy-pod",
              "uid": "0d98fa74-7b39-11e9-a751-005056a0b88e",
            },
            "spec": Object {
              "complianceType": "musthave",
              "namespaces": Object {
                "exclude": Array [
                  "kube*",
                ],
                "include": Array [
                  "default",
                ],
              },
              "object-templates": Array [
                Object {
                  "complianceType": "musthave",
                  "objectDefinition": Object {
                    "apiVersion": "v1",
                    "kind": "Pod",
                    "metadata": Object {
                      "name": "nginx1",
                    },
                    "spec": Object {
                      "containers": Array [
                        Object {
                          "image": "nginx:1.7.9",
                          "name": "nginx",
                          "ports": Array [
                            Object {
                              "containerPort": 80,
                            },
                          ],
                        },
                      ],
                    },
                  },
                  "status": Object {
                    "Validity": Object {},
                  },
                },
              ],
              "remediationAction": "inform",
            },
            "status": Object {
              "placementBindings": Array [
                "1558382034240-placement-binding-test",
              ],
              "placementPolicies": Array [
                "1558382034240-placement-policy-test",
              ],
              "status": Object {
                "cluster1": Object {
                  "aggregatePoliciesStatus": Object {
                    "1558382034240-policy-pod": Object {
                      "compliant": "NonCompliant",
                    },
                  },
                  "clustername": "cluster1",
                  "compliant": "NonCompliant",
                },
                "clusterhub": Object {
                  "aggregatePoliciesStatus": Object {
                    "1558382034240-policy-pod": Object {
                      "compliant": "NonCompliant",
                    },
                  },
                  "clustername": "clusterhub",
                  "compliant": "NonCompliant",
                },
              },
            },
          },
          "remediation": "inform",
        },
        Object {
          "__typename": "Compliance",
          "clusterCompliant": "0/2",
          "metadata": Object {
            "__typename": "Metadata",
            "annotations": Object {
              "policy.mcm.ibm.com/categories": "SystemAndInformationIntegrity",
              "policy.mcm.ibm.com/controls": "MutationAdvisor",
              "policy.mcm.ibm.com/standards": "NIST CSF, NIST",
              "seed-generation": "1",
            },
            "name": "policy-ma",
            "namespace": "mcm",
            "resourceVersion": "6975864",
            "selfLink": "/apis/policy.mcm.ibm.com/v1alpha1/namespaces/mcm/policies/policy-ma",
          },
          "name": "policy-ma",
          "namespace": "mcm",
          "placementBindings": Array [
            Object {
              "__typename": "PlacementBinding",
              "metadata": Object {
                "__typename": "Metadata",
                "name": "binding-ma",
                "selfLink": "/apis/mcm.ibm.com/v1alpha1/namespaces/mcm/placementbindings/binding-ma",
              },
            },
          ],
          "placementPolicies": Array [
            Object {
              "__typename": "PlacementPolicy",
              "metadata": Object {
                "__typename": "Metadata",
                "name": "placement-ma",
                "selfLink": "/apis/mcm.ibm.com/v1alpha1/namespaces/mcm/placementpolicies/placement-ma",
              },
            },
          ],
          "policyCompliant": "0/2",
          "raw": Object {
            "apiVersion": "policy.mcm.ibm.com/v1alpha1",
            "kind": "Policy",
            "metadata": Object {
              "annotations": Object {
                "policy.mcm.ibm.com/categories": "SystemAndInformationIntegrity",
                "policy.mcm.ibm.com/controls": "MutationAdvisor",
                "policy.mcm.ibm.com/standards": "NIST CSF, NIST",
                "seed-generation": "1",
              },
              "creationTimestamp": "2019-05-16T15:21:53Z",
              "finalizers": Array [
                "propagator.finalizer.mcm.ibm.com",
              ],
              "generation": 48,
              "name": "policy-ma",
              "namespace": "mcm",
              "resourceVersion": "6975864",
              "selfLink": "/apis/policy.mcm.ibm.com/v1alpha1/namespaces/mcm/policies/policy-ma",
              "uid": "55ca144d-77ee-11e9-a751-005056a0b88e",
            },
            "spec": Object {
              "namespaces": Object {},
              "policy-templates": Array [
                Object {
                  "objectDefinition": Object {
                    "apiVersion": "policies.ibm.com/v1alpha1",
                    "kind": "MutationPolicy",
                    "metadata": Object {
                      "label": Object {
                        "category": "System-Integrity",
                      },
                      "name": "mutation-policy-example",
                    },
                    "spec": Object {
                      "conditions": Object {
                        "ownership": Array [
                          "ReplicaSet",
                          "Deployment",
                          "DeamonSet",
                          "ReplicationController",
                        ],
                      },
                      "namespaceSelector": Object {
                        "exclude": Array [
                          "kube-system",
                        ],
                        "include": Array [
                          "default",
                          "kube-*",
                        ],
                      },
                      "remediationAction": "enforce",
                    },
                  },
                  "status": Object {
                    "Validity": Object {},
                  },
                },
              ],
              "remediationAction": "enforce",
            },
            "status": Object {
              "placementBindings": Array [
                "binding-ma",
              ],
              "placementPolicies": Array [
                "placement-ma",
              ],
              "status": Object {
                "cluster1": Object {
                  "aggregatePoliciesStatus": Object {
                    "policy-ma": Object {
                      "compliant": "Compliant",
                    },
                  },
                  "clustername": "cluster1",
                  "compliant": "Compliant",
                },
                "clusterhub": Object {
                  "aggregatePoliciesStatus": Object {
                    "policy-ma": Object {
                      "compliant": "Compliant",
                    },
                  },
                  "clustername": "clusterhub",
                  "compliant": "Compliant",
                },
              },
            },
          },
          "remediation": "enforce",
        },
        Object {
          "__typename": "Compliance",
          "clusterCompliant": "2/2",
          "clusterNS": Object {
            "beldams": "beldams",
            "cetane": "cetane",
            "djebel": "djebel",
          },
          "metadata": Object {
            "__typename": "Metadata",
            "annotations": Object {
              "policy.mcm.ibm.com/categories": "SystemAndCommunicationsProtections,SystemAndInformationIntegrity",
              "policy.mcm.ibm.com/controls": "MutationAdvisor,,VA",
              "policy.mcm.ibm.com/standards": "NIST,HIPAA",
              "seed-generation": "1",
            },
            "name": "policy-pod",
            "namespace": "mcm",
            "resourceVersion": "5210306",
            "selfLink": "/apis/policy.mcm.ibm.com/v1alpha1/namespaces/mcm/policies/policy-pod",
          },
          "name": "policy-pod",
          "namespace": "mcm",
          "placementBindings": Array [
            Object {
              "__typename": "PlacementBinding",
              "metadata": Object {
                "__typename": "Metadata",
                "name": "binding-pod",
                "selfLink": "/apis/mcm.ibm.com/v1alpha1/namespaces/mcm/placementbindings/binding-pod",
              },
            },
          ],
          "placementPolicies": Array [
            Object {
              "__typename": "PlacementPolicy",
              "metadata": Object {
                "__typename": "Metadata",
                "name": "placement-pod",
                "selfLink": "/apis/mcm.ibm.com/v1alpha1/namespaces/mcm/placementpolicies/placement-pod",
              },
            },
          ],
          "policyCompliant": "2/2",
          "raw": Object {
            "apiVersion": "policy.mcm.ibm.com/v1alpha1",
            "kind": "Policy",
            "metadata": Object {
              "annotations": Object {
                "policy.mcm.ibm.com/categories": "SystemAndCommunicationsProtections,SystemAndInformationIntegrity",
                "policy.mcm.ibm.com/controls": "MutationAdvisor,,VA",
                "policy.mcm.ibm.com/standards": "NIST,HIPAA",
                "seed-generation": "1",
              },
              "creationTimestamp": "2019-05-16T15:23:05Z",
              "finalizers": Array [
                "propagator.finalizer.mcm.ibm.com",
              ],
              "generation": 12,
              "name": "policy-pod",
              "namespace": "mcm",
              "resourceVersion": "5210306",
              "selfLink": "/apis/policy.mcm.ibm.com/v1alpha1/namespaces/mcm/policies/policy-pod",
              "uid": "80b48466-77ee-11e9-a751-005056a0b88e",
            },
            "spec": Object {
              "complianceType": "musthave",
              "namespaces": Object {
                "exclude": Array [
                  "kube*",
                ],
                "include": Array [
                  "default",
                ],
              },
              "object-templates": Array [
                Object {
                  "complianceType": "musthave",
                  "objectDefinition": Object {
                    "apiVersion": "v1",
                    "kind": "Pod",
                    "metadata": Object {
                      "name": "nginx-pod",
                    },
                    "spec": Object {
                      "containers": Array [
                        Object {
                          "image": "nginx:1.7.9",
                          "name": "nginx",
                          "ports": Array [
                            Object {
                              "containerPort": 80,
                            },
                          ],
                        },
                      ],
                    },
                  },
                  "status": Object {
                    "Validity": Object {},
                  },
                },
              ],
              "remediationAction": "inform",
            },
            "status": Object {
              "placementBindings": Array [
                "binding-pod",
              ],
              "placementPolicies": Array [
                "placement-pod",
              ],
              "status": Object {
                "cluster1": Object {
                  "aggregatePoliciesStatus": Object {
                    "policy-pod": Object {
                      "compliant": "NonCompliant",
                    },
                  },
                  "clustername": "cluster1",
                  "compliant": "NonCompliant",
                },
                "clusterhub": Object {
                  "aggregatePoliciesStatus": Object {
                    "policy-pod": Object {
                      "compliant": "NonCompliant",
                    },
                  },
                  "clustername": "clusterhub",
                  "compliant": "NonCompliant",
                },
              },
            },
          },
          "remediation": "inform",
        },
      ]
    }
    handleDrillDownClick={[MockFunction]}
    showGrcCard={false}
    updateViewState={[MockFunction]}
    viewState={
      Object {
        "viewState": Object {
          "grcCardChoice": "standards",
        },
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <div
          className="header-container card-collapsed"
        >
          <button
            className="collapse"
            onClick={[Function]}
          >
            <span
              className="collapse-hint"
            >
              Want to see your summary cards?
            </span>
            <span
              className="collapse-button"
            >
              Expand summary
            </span>
            <Icon
              className="arrow-down"
              description="expand"
              fillRule="evenodd"
              name="chevron--down"
              role="img"
            />
          </button>
        </div>,
        false,
      ],
      "className": "module-grc-cards",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            false,
            false,
            <button
              className="collapse"
              onClick={[Function]}
            >
              <span
                className="collapse-hint"
              >
                Want to see your summary cards?
              </span>
              <span
                className="collapse-button"
              >
                Expand summary
              </span>
              <Icon
                className="arrow-down"
                description="expand"
                fillRule="evenodd"
                name="chevron--down"
                role="img"
              />
            </button>,
          ],
          "className": "header-container card-collapsed",
        },
        "ref": null,
        "rendered": Array [
          false,
          false,
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <span
                  className="collapse-hint"
                >
                  Want to see your summary cards?
                </span>,
                <span
                  className="collapse-button"
                >
                  Expand summary
                </span>,
                <Icon
                  className="arrow-down"
                  description="expand"
                  fillRule="evenodd"
                  name="chevron--down"
                  role="img"
                />,
              ],
              "className": "collapse",
              "onClick": [Function],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "Want to see your summary cards?",
                  "className": "collapse-hint",
                },
                "ref": null,
                "rendered": "Want to see your summary cards?",
                "type": "span",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "Expand summary",
                  "className": "collapse-button",
                },
                "ref": null,
                "rendered": "Expand summary",
                "type": "span",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "className": "arrow-down",
                  "description": "expand",
                  "fillRule": "evenodd",
                  "name": "chevron--down",
                  "role": "img",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
            ],
            "type": "button",
          },
        ],
        "type": "div",
      },
      false,
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <div
            className="header-container card-collapsed"
          >
            <button
              className="collapse"
              onClick={[Function]}
            >
              <span
                className="collapse-hint"
              >
                Want to see your summary cards?
              </span>
              <span
                className="collapse-button"
              >
                Expand summary
              </span>
              <Icon
                className="arrow-down"
                description="expand"
                fillRule="evenodd"
                name="chevron--down"
                role="img"
              />
            </button>
          </div>,
          false,
        ],
        "className": "module-grc-cards",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              false,
              false,
              <button
                className="collapse"
                onClick={[Function]}
              >
                <span
                  className="collapse-hint"
                >
                  Want to see your summary cards?
                </span>
                <span
                  className="collapse-button"
                >
                  Expand summary
                </span>
                <Icon
                  className="arrow-down"
                  description="expand"
                  fillRule="evenodd"
                  name="chevron--down"
                  role="img"
                />
              </button>,
            ],
            "className": "header-container card-collapsed",
          },
          "ref": null,
          "rendered": Array [
            false,
            false,
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <span
                    className="collapse-hint"
                  >
                    Want to see your summary cards?
                  </span>,
                  <span
                    className="collapse-button"
                  >
                    Expand summary
                  </span>,
                  <Icon
                    className="arrow-down"
                    description="expand"
                    fillRule="evenodd"
                    name="chevron--down"
                    role="img"
                  />,
                ],
                "className": "collapse",
                "onClick": [Function],
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "Want to see your summary cards?",
                    "className": "collapse-hint",
                  },
                  "ref": null,
                  "rendered": "Want to see your summary cards?",
                  "type": "span",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "Expand summary",
                    "className": "collapse-button",
                  },
                  "ref": null,
                  "rendered": "Expand summary",
                  "type": "span",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "className": "arrow-down",
                    "description": "expand",
                    "fillRule": "evenodd",
                    "name": "chevron--down",
                    "role": "img",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
              ],
              "type": "button",
            },
          ],
          "type": "div",
        },
        false,
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": true,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    Symbol(enzyme.__providerValues__): undefined,
  },
  Symbol(enzyme.__providerValues__): Map {},
  Symbol(enzyme.__childContext__): null,
}
`;

exports[`GrcCardsModule policies page standards view renders expand as expected 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <GrcCardsModule
    activeFilters={
      Object {
        "activeFilters": Object {},
      }
    }
    displayType="all"
    grcItems={
      Array [
        Object {
          "__typename": "Compliance",
          "clusterCompliant": "2/2",
          "clusterNS": Object {
            "beldams": "beldams",
            "cetane": "cetane",
            "djebel": "djebel",
          },
          "metadata": Object {
            "__typename": "Metadata",
            "annotations": Object {
              "policy.mcm.ibm.com/categories": "SystemAndCommunicationsProtections,SystemAndInformationIntegrity",
              "policy.mcm.ibm.com/controls": "MutationAdvisor,,VA",
              "policy.mcm.ibm.com/standards": "NIST CSF",
              "seed-generation": "2",
            },
            "name": "1558374675051-policy-pod",
            "namespace": "mcm",
            "resourceVersion": "6281988",
            "selfLink": "/apis/policy.mcm.ibm.com/v1alpha1/namespaces/mcm/policies/1558374675051-policy-pod",
          },
          "name": "1558374675051-policy-pod",
          "namespace": "mcm",
          "placementBindings": Array [
            Object {
              "__typename": "PlacementBinding",
              "metadata": Object {
                "__typename": "Metadata",
                "name": "1558374675051-placement-binding-test",
                "selfLink": "/apis/mcm.ibm.com/v1alpha1/namespaces/mcm/placementbindings/1558374675051-placement-binding-test",
              },
            },
          ],
          "placementPolicies": Array [
            Object {
              "__typename": "PlacementPolicy",
              "metadata": Object {
                "__typename": "Metadata",
                "name": "1558374675051-placement-policy-test",
                "selfLink": "/apis/mcm.ibm.com/v1alpha1/namespaces/mcm/placementpolicies/1558374675051-placement-policy-test",
              },
            },
          ],
          "policyCompliant": "2/2",
          "raw": Object {
            "apiVersion": "policy.mcm.ibm.com/v1alpha1",
            "kind": "Policy",
            "metadata": Object {
              "annotations": Object {
                "policy.mcm.ibm.com/categories": "SystemAndCommunicationsProtections,SystemAndInformationIntegrity",
                "policy.mcm.ibm.com/controls": "MutationAdvisor,,VA",
                "policy.mcm.ibm.com/standards": "NIST CSF",
                "seed-generation": "2",
              },
              "creationTimestamp": "2019-05-20T17:51:38Z",
              "finalizers": Array [
                "propagator.finalizer.mcm.ibm.com",
              ],
              "generation": 6,
              "name": "1558374675051-policy-pod",
              "namespace": "mcm",
              "resourceVersion": "6281988",
              "selfLink": "/apis/policy.mcm.ibm.com/v1alpha1/namespaces/mcm/policies/1558374675051-policy-pod",
              "uid": "eacbfd03-7b27-11e9-a751-005056a0b88e",
            },
            "spec": Object {
              "complianceType": "musthave",
              "namespaces": Object {
                "exclude": Array [
                  "kube*",
                ],
                "include": Array [
                  "default",
                ],
              },
              "object-templates": Array [
                Object {
                  "complianceType": "musthave",
                  "objectDefinition": Object {
                    "apiVersion": "v1",
                    "kind": "Pod",
                    "metadata": Object {
                      "name": "nginx1",
                    },
                    "spec": Object {
                      "containers": Array [
                        Object {
                          "image": "nginx:1.7.9",
                          "name": "nginx",
                          "ports": Array [
                            Object {
                              "containerPort": 80,
                            },
                          ],
                        },
                      ],
                    },
                  },
                  "status": Object {
                    "Validity": Object {},
                  },
                },
              ],
              "remediationAction": "inform",
            },
            "status": Object {
              "placementBindings": Array [
                "1558374675051-placement-binding-test",
              ],
              "placementPolicies": Array [
                "1558374675051-placement-policy-test",
              ],
              "status": Object {
                "cluster1": Object {
                  "aggregatePoliciesStatus": Object {
                    "1558374675051-policy-pod": Object {
                      "compliant": "NonCompliant",
                    },
                  },
                  "clustername": "cluster1",
                  "compliant": "NonCompliant",
                },
                "clusterhub": Object {
                  "aggregatePoliciesStatus": Object {
                    "1558374675051-policy-pod": Object {
                      "compliant": "NonCompliant",
                    },
                  },
                  "clustername": "clusterhub",
                  "compliant": "NonCompliant",
                },
              },
            },
          },
          "remediation": "inform",
        },
        Object {
          "__typename": "Compliance",
          "clusterCompliant": "2/2",
          "metadata": Object {
            "__typename": "Metadata",
            "annotations": Object {
              "policy.mcm.ibm.com/categories": "SystemAndCommunicationsProtections,SystemAndInformationIntegrity",
              "policy.mcm.ibm.com/controls": "MutationAdvisor,,VA",
              "policy.mcm.ibm.com/standards": "NIST CSF, NIST",
              "seed-generation": "2",
            },
            "name": "1558382034240-policy-pod",
            "namespace": "mcm",
            "resourceVersion": "6975805",
            "selfLink": "/apis/policy.mcm.ibm.com/v1alpha1/namespaces/mcm/policies/1558382034240-policy-pod",
          },
          "name": "1558382034240-policy-pod",
          "namespace": "mcm",
          "placementBindings": Array [
            Object {
              "__typename": "PlacementBinding",
              "metadata": Object {
                "__typename": "Metadata",
                "name": "1558382034240-placement-binding-test",
                "selfLink": "/apis/mcm.ibm.com/v1alpha1/namespaces/mcm/placementbindings/1558382034240-placement-binding-test",
              },
            },
          ],
          "placementPolicies": Array [
            Object {
              "__typename": "PlacementPolicy",
              "metadata": Object {
                "__typename": "Metadata",
                "name": "1558382034240-placement-policy-test",
                "selfLink": "/apis/mcm.ibm.com/v1alpha1/namespaces/mcm/placementpolicies/1558382034240-placement-policy-test",
              },
            },
          ],
          "policyCompliant": "2/2",
          "raw": Object {
            "apiVersion": "policy.mcm.ibm.com/v1alpha1",
            "kind": "Policy",
            "metadata": Object {
              "annotations": Object {
                "policy.mcm.ibm.com/categories": "SystemAndCommunicationsProtections,SystemAndInformationIntegrity",
                "policy.mcm.ibm.com/controls": "MutationAdvisor,,VA",
                "policy.mcm.ibm.com/standards": "NIST CSF, NIST",
                "seed-generation": "2",
              },
              "creationTimestamp": "2019-05-20T19:54:18Z",
              "finalizers": Array [
                "propagator.finalizer.mcm.ibm.com",
              ],
              "generation": 11,
              "name": "1558382034240-policy-pod",
              "namespace": "mcm",
              "resourceVersion": "6975805",
              "selfLink": "/apis/policy.mcm.ibm.com/v1alpha1/namespaces/mcm/policies/1558382034240-policy-pod",
              "uid": "0d98fa74-7b39-11e9-a751-005056a0b88e",
            },
            "spec": Object {
              "complianceType": "musthave",
              "namespaces": Object {
                "exclude": Array [
                  "kube*",
                ],
                "include": Array [
                  "default",
                ],
              },
              "object-templates": Array [
                Object {
                  "complianceType": "musthave",
                  "objectDefinition": Object {
                    "apiVersion": "v1",
                    "kind": "Pod",
                    "metadata": Object {
                      "name": "nginx1",
                    },
                    "spec": Object {
                      "containers": Array [
                        Object {
                          "image": "nginx:1.7.9",
                          "name": "nginx",
                          "ports": Array [
                            Object {
                              "containerPort": 80,
                            },
                          ],
                        },
                      ],
                    },
                  },
                  "status": Object {
                    "Validity": Object {},
                  },
                },
              ],
              "remediationAction": "inform",
            },
            "status": Object {
              "placementBindings": Array [
                "1558382034240-placement-binding-test",
              ],
              "placementPolicies": Array [
                "1558382034240-placement-policy-test",
              ],
              "status": Object {
                "cluster1": Object {
                  "aggregatePoliciesStatus": Object {
                    "1558382034240-policy-pod": Object {
                      "compliant": "NonCompliant",
                    },
                  },
                  "clustername": "cluster1",
                  "compliant": "NonCompliant",
                },
                "clusterhub": Object {
                  "aggregatePoliciesStatus": Object {
                    "1558382034240-policy-pod": Object {
                      "compliant": "NonCompliant",
                    },
                  },
                  "clustername": "clusterhub",
                  "compliant": "NonCompliant",
                },
              },
            },
          },
          "remediation": "inform",
        },
        Object {
          "__typename": "Compliance",
          "clusterCompliant": "0/2",
          "metadata": Object {
            "__typename": "Metadata",
            "annotations": Object {
              "policy.mcm.ibm.com/categories": "SystemAndInformationIntegrity",
              "policy.mcm.ibm.com/controls": "MutationAdvisor",
              "policy.mcm.ibm.com/standards": "NIST CSF, NIST",
              "seed-generation": "1",
            },
            "name": "policy-ma",
            "namespace": "mcm",
            "resourceVersion": "6975864",
            "selfLink": "/apis/policy.mcm.ibm.com/v1alpha1/namespaces/mcm/policies/policy-ma",
          },
          "name": "policy-ma",
          "namespace": "mcm",
          "placementBindings": Array [
            Object {
              "__typename": "PlacementBinding",
              "metadata": Object {
                "__typename": "Metadata",
                "name": "binding-ma",
                "selfLink": "/apis/mcm.ibm.com/v1alpha1/namespaces/mcm/placementbindings/binding-ma",
              },
            },
          ],
          "placementPolicies": Array [
            Object {
              "__typename": "PlacementPolicy",
              "metadata": Object {
                "__typename": "Metadata",
                "name": "placement-ma",
                "selfLink": "/apis/mcm.ibm.com/v1alpha1/namespaces/mcm/placementpolicies/placement-ma",
              },
            },
          ],
          "policyCompliant": "0/2",
          "raw": Object {
            "apiVersion": "policy.mcm.ibm.com/v1alpha1",
            "kind": "Policy",
            "metadata": Object {
              "annotations": Object {
                "policy.mcm.ibm.com/categories": "SystemAndInformationIntegrity",
                "policy.mcm.ibm.com/controls": "MutationAdvisor",
                "policy.mcm.ibm.com/standards": "NIST CSF, NIST",
                "seed-generation": "1",
              },
              "creationTimestamp": "2019-05-16T15:21:53Z",
              "finalizers": Array [
                "propagator.finalizer.mcm.ibm.com",
              ],
              "generation": 48,
              "name": "policy-ma",
              "namespace": "mcm",
              "resourceVersion": "6975864",
              "selfLink": "/apis/policy.mcm.ibm.com/v1alpha1/namespaces/mcm/policies/policy-ma",
              "uid": "55ca144d-77ee-11e9-a751-005056a0b88e",
            },
            "spec": Object {
              "namespaces": Object {},
              "policy-templates": Array [
                Object {
                  "objectDefinition": Object {
                    "apiVersion": "policies.ibm.com/v1alpha1",
                    "kind": "MutationPolicy",
                    "metadata": Object {
                      "label": Object {
                        "category": "System-Integrity",
                      },
                      "name": "mutation-policy-example",
                    },
                    "spec": Object {
                      "conditions": Object {
                        "ownership": Array [
                          "ReplicaSet",
                          "Deployment",
                          "DeamonSet",
                          "ReplicationController",
                        ],
                      },
                      "namespaceSelector": Object {
                        "exclude": Array [
                          "kube-system",
                        ],
                        "include": Array [
                          "default",
                          "kube-*",
                        ],
                      },
                      "remediationAction": "enforce",
                    },
                  },
                  "status": Object {
                    "Validity": Object {},
                  },
                },
              ],
              "remediationAction": "enforce",
            },
            "status": Object {
              "placementBindings": Array [
                "binding-ma",
              ],
              "placementPolicies": Array [
                "placement-ma",
              ],
              "status": Object {
                "cluster1": Object {
                  "aggregatePoliciesStatus": Object {
                    "policy-ma": Object {
                      "compliant": "Compliant",
                    },
                  },
                  "clustername": "cluster1",
                  "compliant": "Compliant",
                },
                "clusterhub": Object {
                  "aggregatePoliciesStatus": Object {
                    "policy-ma": Object {
                      "compliant": "Compliant",
                    },
                  },
                  "clustername": "clusterhub",
                  "compliant": "Compliant",
                },
              },
            },
          },
          "remediation": "enforce",
        },
        Object {
          "__typename": "Compliance",
          "clusterCompliant": "2/2",
          "clusterNS": Object {
            "beldams": "beldams",
            "cetane": "cetane",
            "djebel": "djebel",
          },
          "metadata": Object {
            "__typename": "Metadata",
            "annotations": Object {
              "policy.mcm.ibm.com/categories": "SystemAndCommunicationsProtections,SystemAndInformationIntegrity",
              "policy.mcm.ibm.com/controls": "MutationAdvisor,,VA",
              "policy.mcm.ibm.com/standards": "NIST,HIPAA",
              "seed-generation": "1",
            },
            "name": "policy-pod",
            "namespace": "mcm",
            "resourceVersion": "5210306",
            "selfLink": "/apis/policy.mcm.ibm.com/v1alpha1/namespaces/mcm/policies/policy-pod",
          },
          "name": "policy-pod",
          "namespace": "mcm",
          "placementBindings": Array [
            Object {
              "__typename": "PlacementBinding",
              "metadata": Object {
                "__typename": "Metadata",
                "name": "binding-pod",
                "selfLink": "/apis/mcm.ibm.com/v1alpha1/namespaces/mcm/placementbindings/binding-pod",
              },
            },
          ],
          "placementPolicies": Array [
            Object {
              "__typename": "PlacementPolicy",
              "metadata": Object {
                "__typename": "Metadata",
                "name": "placement-pod",
                "selfLink": "/apis/mcm.ibm.com/v1alpha1/namespaces/mcm/placementpolicies/placement-pod",
              },
            },
          ],
          "policyCompliant": "2/2",
          "raw": Object {
            "apiVersion": "policy.mcm.ibm.com/v1alpha1",
            "kind": "Policy",
            "metadata": Object {
              "annotations": Object {
                "policy.mcm.ibm.com/categories": "SystemAndCommunicationsProtections,SystemAndInformationIntegrity",
                "policy.mcm.ibm.com/controls": "MutationAdvisor,,VA",
                "policy.mcm.ibm.com/standards": "NIST,HIPAA",
                "seed-generation": "1",
              },
              "creationTimestamp": "2019-05-16T15:23:05Z",
              "finalizers": Array [
                "propagator.finalizer.mcm.ibm.com",
              ],
              "generation": 12,
              "name": "policy-pod",
              "namespace": "mcm",
              "resourceVersion": "5210306",
              "selfLink": "/apis/policy.mcm.ibm.com/v1alpha1/namespaces/mcm/policies/policy-pod",
              "uid": "80b48466-77ee-11e9-a751-005056a0b88e",
            },
            "spec": Object {
              "complianceType": "musthave",
              "namespaces": Object {
                "exclude": Array [
                  "kube*",
                ],
                "include": Array [
                  "default",
                ],
              },
              "object-templates": Array [
                Object {
                  "complianceType": "musthave",
                  "objectDefinition": Object {
                    "apiVersion": "v1",
                    "kind": "Pod",
                    "metadata": Object {
                      "name": "nginx-pod",
                    },
                    "spec": Object {
                      "containers": Array [
                        Object {
                          "image": "nginx:1.7.9",
                          "name": "nginx",
                          "ports": Array [
                            Object {
                              "containerPort": 80,
                            },
                          ],
                        },
                      ],
                    },
                  },
                  "status": Object {
                    "Validity": Object {},
                  },
                },
              ],
              "remediationAction": "inform",
            },
            "status": Object {
              "placementBindings": Array [
                "binding-pod",
              ],
              "placementPolicies": Array [
                "placement-pod",
              ],
              "status": Object {
                "cluster1": Object {
                  "aggregatePoliciesStatus": Object {
                    "policy-pod": Object {
                      "compliant": "NonCompliant",
                    },
                  },
                  "clustername": "cluster1",
                  "compliant": "NonCompliant",
                },
                "clusterhub": Object {
                  "aggregatePoliciesStatus": Object {
                    "policy-pod": Object {
                      "compliant": "NonCompliant",
                    },
                  },
                  "clustername": "clusterhub",
                  "compliant": "NonCompliant",
                },
              },
            },
          },
          "remediation": "inform",
        },
      ]
    }
    handleDrillDownClick={[MockFunction]}
    showGrcCard={true}
    updateViewState={[MockFunction]}
    viewState={
      Object {
        "viewState": Object {
          "grcCardChoice": "standards",
        },
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <div
          className="header-container"
        >
          <div
            className="header-title"
          >
            Summary
          </div>
          <div>
            <DropdownV2
              ariaLabel="Summary"
              className="selection"
              disabled={false}
              helperText=""
              initialSelectedItem="Standards"
              inline={true}
              itemToElement={null}
              itemToString={[Function]}
              items={
                Array [
                  Object {
                    "label": "Categories",
                    "value": "categories",
                  },
                  Object {
                    "label": "Standards",
                    "value": "standards",
                  },
                ]
              }
              label="Summary"
              light={false}
              onChange={[Function]}
              titleText=""
              type="default"
            />
          </div>
          <button
            className="collapse"
            onClick={[Function]}
          >
            <span
              className="collapse-hint"
            >
              Want to see less information?
            </span>
            <span
              className="collapse-button"
            >
              Collapse summary
            </span>
            <Icon
              className="arrow-up"
              description="collapse"
              fillRule="evenodd"
              name="chevron--up"
              role="img"
            />
          </button>
        </div>,
        <div
          className="card-container-container"
        >
          <PolicyCard
            data={
              Object {
                "choice": "standards",
                "counts": Object {
                  "cluster": Object {
                    "total": 2,
                    "violations": 2,
                  },
                  "policy": Object {
                    "total": 3,
                    "violations": 2,
                  },
                },
                "name": "NIST",
                "rawName": "NIST",
                "violations": 4,
              }
            }
            handleClick={[MockFunction]}
            locale={undefined}
          />
          <PolicyCard
            data={
              Object {
                "choice": "standards",
                "counts": Object {
                  "cluster": Object {
                    "total": 2,
                    "violations": 2,
                  },
                  "policy": Object {
                    "total": 3,
                    "violations": 2,
                  },
                },
                "name": "NIST CSF",
                "rawName": "NIST CSF",
                "violations": 4,
              }
            }
            handleClick={[MockFunction]}
            locale={undefined}
          />
          <PolicyCard
            data={
              Object {
                "choice": "standards",
                "counts": Object {
                  "cluster": Object {
                    "total": 2,
                    "violations": 2,
                  },
                  "policy": Object {
                    "total": 1,
                    "violations": 1,
                  },
                },
                "name": "HIPAA",
                "rawName": "HIPAA",
                "violations": 3,
              }
            }
            handleClick={[MockFunction]}
            locale={undefined}
          />
        </div>,
      ],
      "className": "module-grc-cards",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <div
              className="header-title"
            >
              Summary
            </div>,
            <div>
              <DropdownV2
                ariaLabel="Summary"
                className="selection"
                disabled={false}
                helperText=""
                initialSelectedItem="Standards"
                inline={true}
                itemToElement={null}
                itemToString={[Function]}
                items={
                  Array [
                    Object {
                      "label": "Categories",
                      "value": "categories",
                    },
                    Object {
                      "label": "Standards",
                      "value": "standards",
                    },
                  ]
                }
                label="Summary"
                light={false}
                onChange={[Function]}
                titleText=""
                type="default"
              />
            </div>,
            <button
              className="collapse"
              onClick={[Function]}
            >
              <span
                className="collapse-hint"
              >
                Want to see less information?
              </span>
              <span
                className="collapse-button"
              >
                Collapse summary
              </span>
              <Icon
                className="arrow-up"
                description="collapse"
                fillRule="evenodd"
                name="chevron--up"
                role="img"
              />
            </button>,
          ],
          "className": "header-container",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Summary",
              "className": "header-title",
            },
            "ref": null,
            "rendered": "Summary",
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <DropdownV2
                ariaLabel="Summary"
                className="selection"
                disabled={false}
                helperText=""
                initialSelectedItem="Standards"
                inline={true}
                itemToElement={null}
                itemToString={[Function]}
                items={
                  Array [
                    Object {
                      "label": "Categories",
                      "value": "categories",
                    },
                    Object {
                      "label": "Standards",
                      "value": "standards",
                    },
                  ]
                }
                label="Summary"
                light={false}
                onChange={[Function]}
                titleText=""
                type="default"
              />,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "ariaLabel": "Summary",
                "className": "selection",
                "disabled": false,
                "helperText": "",
                "initialSelectedItem": "Standards",
                "inline": true,
                "itemToElement": null,
                "itemToString": [Function],
                "items": Array [
                  Object {
                    "label": "Categories",
                    "value": "categories",
                  },
                  Object {
                    "label": "Standards",
                    "value": "standards",
                  },
                ],
                "label": "Summary",
                "light": false,
                "onChange": [Function],
                "titleText": "",
                "type": "default",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <span
                  className="collapse-hint"
                >
                  Want to see less information?
                </span>,
                <span
                  className="collapse-button"
                >
                  Collapse summary
                </span>,
                <Icon
                  className="arrow-up"
                  description="collapse"
                  fillRule="evenodd"
                  name="chevron--up"
                  role="img"
                />,
              ],
              "className": "collapse",
              "onClick": [Function],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "Want to see less information?",
                  "className": "collapse-hint",
                },
                "ref": null,
                "rendered": "Want to see less information?",
                "type": "span",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "Collapse summary",
                  "className": "collapse-button",
                },
                "ref": null,
                "rendered": "Collapse summary",
                "type": "span",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "className": "arrow-up",
                  "description": "collapse",
                  "fillRule": "evenodd",
                  "name": "chevron--up",
                  "role": "img",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
            ],
            "type": "button",
          },
        ],
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <PolicyCard
              data={
                Object {
                  "choice": "standards",
                  "counts": Object {
                    "cluster": Object {
                      "total": 2,
                      "violations": 2,
                    },
                    "policy": Object {
                      "total": 3,
                      "violations": 2,
                    },
                  },
                  "name": "NIST",
                  "rawName": "NIST",
                  "violations": 4,
                }
              }
              handleClick={[MockFunction]}
              locale={undefined}
            />,
            <PolicyCard
              data={
                Object {
                  "choice": "standards",
                  "counts": Object {
                    "cluster": Object {
                      "total": 2,
                      "violations": 2,
                    },
                    "policy": Object {
                      "total": 3,
                      "violations": 2,
                    },
                  },
                  "name": "NIST CSF",
                  "rawName": "NIST CSF",
                  "violations": 4,
                }
              }
              handleClick={[MockFunction]}
              locale={undefined}
            />,
            <PolicyCard
              data={
                Object {
                  "choice": "standards",
                  "counts": Object {
                    "cluster": Object {
                      "total": 2,
                      "violations": 2,
                    },
                    "policy": Object {
                      "total": 1,
                      "violations": 1,
                    },
                  },
                  "name": "HIPAA",
                  "rawName": "HIPAA",
                  "violations": 3,
                }
              }
              handleClick={[MockFunction]}
              locale={undefined}
            />,
          ],
          "className": "card-container-container",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": "NIST",
            "nodeType": "function",
            "props": Object {
              "data": Object {
                "choice": "standards",
                "counts": Object {
                  "cluster": Object {
                    "total": 2,
                    "violations": 2,
                  },
                  "policy": Object {
                    "total": 3,
                    "violations": 2,
                  },
                },
                "name": "NIST",
                "rawName": "NIST",
                "violations": 4,
              },
              "handleClick": [MockFunction],
              "locale": undefined,
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": "NIST CSF",
            "nodeType": "function",
            "props": Object {
              "data": Object {
                "choice": "standards",
                "counts": Object {
                  "cluster": Object {
                    "total": 2,
                    "violations": 2,
                  },
                  "policy": Object {
                    "total": 3,
                    "violations": 2,
                  },
                },
                "name": "NIST CSF",
                "rawName": "NIST CSF",
                "violations": 4,
              },
              "handleClick": [MockFunction],
              "locale": undefined,
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": "HIPAA",
            "nodeType": "function",
            "props": Object {
              "data": Object {
                "choice": "standards",
                "counts": Object {
                  "cluster": Object {
                    "total": 2,
                    "violations": 2,
                  },
                  "policy": Object {
                    "total": 1,
                    "violations": 1,
                  },
                },
                "name": "HIPAA",
                "rawName": "HIPAA",
                "violations": 3,
              },
              "handleClick": [MockFunction],
              "locale": undefined,
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": "div",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <div
            className="header-container"
          >
            <div
              className="header-title"
            >
              Summary
            </div>
            <div>
              <DropdownV2
                ariaLabel="Summary"
                className="selection"
                disabled={false}
                helperText=""
                initialSelectedItem="Standards"
                inline={true}
                itemToElement={null}
                itemToString={[Function]}
                items={
                  Array [
                    Object {
                      "label": "Categories",
                      "value": "categories",
                    },
                    Object {
                      "label": "Standards",
                      "value": "standards",
                    },
                  ]
                }
                label="Summary"
                light={false}
                onChange={[Function]}
                titleText=""
                type="default"
              />
            </div>
            <button
              className="collapse"
              onClick={[Function]}
            >
              <span
                className="collapse-hint"
              >
                Want to see less information?
              </span>
              <span
                className="collapse-button"
              >
                Collapse summary
              </span>
              <Icon
                className="arrow-up"
                description="collapse"
                fillRule="evenodd"
                name="chevron--up"
                role="img"
              />
            </button>
          </div>,
          <div
            className="card-container-container"
          >
            <PolicyCard
              data={
                Object {
                  "choice": "standards",
                  "counts": Object {
                    "cluster": Object {
                      "total": 2,
                      "violations": 2,
                    },
                    "policy": Object {
                      "total": 3,
                      "violations": 2,
                    },
                  },
                  "name": "NIST",
                  "rawName": "NIST",
                  "violations": 4,
                }
              }
              handleClick={[MockFunction]}
              locale={undefined}
            />
            <PolicyCard
              data={
                Object {
                  "choice": "standards",
                  "counts": Object {
                    "cluster": Object {
                      "total": 2,
                      "violations": 2,
                    },
                    "policy": Object {
                      "total": 3,
                      "violations": 2,
                    },
                  },
                  "name": "NIST CSF",
                  "rawName": "NIST CSF",
                  "violations": 4,
                }
              }
              handleClick={[MockFunction]}
              locale={undefined}
            />
            <PolicyCard
              data={
                Object {
                  "choice": "standards",
                  "counts": Object {
                    "cluster": Object {
                      "total": 2,
                      "violations": 2,
                    },
                    "policy": Object {
                      "total": 1,
                      "violations": 1,
                    },
                  },
                  "name": "HIPAA",
                  "rawName": "HIPAA",
                  "violations": 3,
                }
              }
              handleClick={[MockFunction]}
              locale={undefined}
            />
          </div>,
        ],
        "className": "module-grc-cards",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <div
                className="header-title"
              >
                Summary
              </div>,
              <div>
                <DropdownV2
                  ariaLabel="Summary"
                  className="selection"
                  disabled={false}
                  helperText=""
                  initialSelectedItem="Standards"
                  inline={true}
                  itemToElement={null}
                  itemToString={[Function]}
                  items={
                    Array [
                      Object {
                        "label": "Categories",
                        "value": "categories",
                      },
                      Object {
                        "label": "Standards",
                        "value": "standards",
                      },
                    ]
                  }
                  label="Summary"
                  light={false}
                  onChange={[Function]}
                  titleText=""
                  type="default"
                />
              </div>,
              <button
                className="collapse"
                onClick={[Function]}
              >
                <span
                  className="collapse-hint"
                >
                  Want to see less information?
                </span>
                <span
                  className="collapse-button"
                >
                  Collapse summary
                </span>
                <Icon
                  className="arrow-up"
                  description="collapse"
                  fillRule="evenodd"
                  name="chevron--up"
                  role="img"
                />
              </button>,
            ],
            "className": "header-container",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Summary",
                "className": "header-title",
              },
              "ref": null,
              "rendered": "Summary",
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <DropdownV2
                  ariaLabel="Summary"
                  className="selection"
                  disabled={false}
                  helperText=""
                  initialSelectedItem="Standards"
                  inline={true}
                  itemToElement={null}
                  itemToString={[Function]}
                  items={
                    Array [
                      Object {
                        "label": "Categories",
                        "value": "categories",
                      },
                      Object {
                        "label": "Standards",
                        "value": "standards",
                      },
                    ]
                  }
                  label="Summary"
                  light={false}
                  onChange={[Function]}
                  titleText=""
                  type="default"
                />,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "ariaLabel": "Summary",
                  "className": "selection",
                  "disabled": false,
                  "helperText": "",
                  "initialSelectedItem": "Standards",
                  "inline": true,
                  "itemToElement": null,
                  "itemToString": [Function],
                  "items": Array [
                    Object {
                      "label": "Categories",
                      "value": "categories",
                    },
                    Object {
                      "label": "Standards",
                      "value": "standards",
                    },
                  ],
                  "label": "Summary",
                  "light": false,
                  "onChange": [Function],
                  "titleText": "",
                  "type": "default",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <span
                    className="collapse-hint"
                  >
                    Want to see less information?
                  </span>,
                  <span
                    className="collapse-button"
                  >
                    Collapse summary
                  </span>,
                  <Icon
                    className="arrow-up"
                    description="collapse"
                    fillRule="evenodd"
                    name="chevron--up"
                    role="img"
                  />,
                ],
                "className": "collapse",
                "onClick": [Function],
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "Want to see less information?",
                    "className": "collapse-hint",
                  },
                  "ref": null,
                  "rendered": "Want to see less information?",
                  "type": "span",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "Collapse summary",
                    "className": "collapse-button",
                  },
                  "ref": null,
                  "rendered": "Collapse summary",
                  "type": "span",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "className": "arrow-up",
                    "description": "collapse",
                    "fillRule": "evenodd",
                    "name": "chevron--up",
                    "role": "img",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
              ],
              "type": "button",
            },
          ],
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <PolicyCard
                data={
                  Object {
                    "choice": "standards",
                    "counts": Object {
                      "cluster": Object {
                        "total": 2,
                        "violations": 2,
                      },
                      "policy": Object {
                        "total": 3,
                        "violations": 2,
                      },
                    },
                    "name": "NIST",
                    "rawName": "NIST",
                    "violations": 4,
                  }
                }
                handleClick={[MockFunction]}
                locale={undefined}
              />,
              <PolicyCard
                data={
                  Object {
                    "choice": "standards",
                    "counts": Object {
                      "cluster": Object {
                        "total": 2,
                        "violations": 2,
                      },
                      "policy": Object {
                        "total": 3,
                        "violations": 2,
                      },
                    },
                    "name": "NIST CSF",
                    "rawName": "NIST CSF",
                    "violations": 4,
                  }
                }
                handleClick={[MockFunction]}
                locale={undefined}
              />,
              <PolicyCard
                data={
                  Object {
                    "choice": "standards",
                    "counts": Object {
                      "cluster": Object {
                        "total": 2,
                        "violations": 2,
                      },
                      "policy": Object {
                        "total": 1,
                        "violations": 1,
                      },
                    },
                    "name": "HIPAA",
                    "rawName": "HIPAA",
                    "violations": 3,
                  }
                }
                handleClick={[MockFunction]}
                locale={undefined}
              />,
            ],
            "className": "card-container-container",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": "NIST",
              "nodeType": "function",
              "props": Object {
                "data": Object {
                  "choice": "standards",
                  "counts": Object {
                    "cluster": Object {
                      "total": 2,
                      "violations": 2,
                    },
                    "policy": Object {
                      "total": 3,
                      "violations": 2,
                    },
                  },
                  "name": "NIST",
                  "rawName": "NIST",
                  "violations": 4,
                },
                "handleClick": [MockFunction],
                "locale": undefined,
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": "NIST CSF",
              "nodeType": "function",
              "props": Object {
                "data": Object {
                  "choice": "standards",
                  "counts": Object {
                    "cluster": Object {
                      "total": 2,
                      "violations": 2,
                    },
                    "policy": Object {
                      "total": 3,
                      "violations": 2,
                    },
                  },
                  "name": "NIST CSF",
                  "rawName": "NIST CSF",
                  "violations": 4,
                },
                "handleClick": [MockFunction],
                "locale": undefined,
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": "HIPAA",
              "nodeType": "function",
              "props": Object {
                "data": Object {
                  "choice": "standards",
                  "counts": Object {
                    "cluster": Object {
                      "total": 2,
                      "violations": 2,
                    },
                    "policy": Object {
                      "total": 1,
                      "violations": 1,
                    },
                  },
                  "name": "HIPAA",
                  "rawName": "HIPAA",
                  "violations": 3,
                },
                "handleClick": [MockFunction],
                "locale": undefined,
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": "div",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": true,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    Symbol(enzyme.__providerValues__): undefined,
  },
  Symbol(enzyme.__providerValues__): Map {},
  Symbol(enzyme.__childContext__): null,
}
`;
